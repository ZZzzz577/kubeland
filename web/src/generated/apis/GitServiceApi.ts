/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1GitGitSettings,
  ApiV1GitListBranchesResponse,
  ApiV1GitListCommitsResponse,
} from '../models/index';
import {
    ApiV1GitGitSettingsFromJSON,
    ApiV1GitGitSettingsToJSON,
    ApiV1GitListBranchesResponseFromJSON,
    ApiV1GitListBranchesResponseToJSON,
    ApiV1GitListCommitsResponseFromJSON,
    ApiV1GitListCommitsResponseToJSON,
} from '../models/index';

export interface GitServiceApplyGitSettingsRequest {
    name: string;
    apiV1GitGitSettings: ApiV1GitGitSettings;
}

export interface GitServiceGetGitSettingsRequest {
    name: string;
}

export interface GitServiceListBranchesRequest {
    name: string;
}

export interface GitServiceListCommitsRequest {
    name: string;
    branchName: string;
    pageCurrent?: number;
    pageSize?: number;
}

/**
 * 
 */
export class GitServiceApi extends runtime.BaseAPI {

    /**
     */
    async gitServiceApplyGitSettingsRaw(requestParameters: GitServiceApplyGitSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling gitServiceApplyGitSettings().'
            );
        }

        if (requestParameters['apiV1GitGitSettings'] == null) {
            throw new runtime.RequiredError(
                'apiV1GitGitSettings',
                'Required parameter "apiV1GitGitSettings" was null or undefined when calling gitServiceApplyGitSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/app/{name}/git`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1GitGitSettingsToJSON(requestParameters['apiV1GitGitSettings']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async gitServiceApplyGitSettings(requestParameters: GitServiceApplyGitSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.gitServiceApplyGitSettingsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async gitServiceGetGitSettingsRaw(requestParameters: GitServiceGetGitSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1GitGitSettings>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling gitServiceGetGitSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/app/{name}/git`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1GitGitSettingsFromJSON(jsonValue));
    }

    /**
     */
    async gitServiceGetGitSettings(requestParameters: GitServiceGetGitSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1GitGitSettings> {
        const response = await this.gitServiceGetGitSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gitServiceListBranchesRaw(requestParameters: GitServiceListBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1GitListBranchesResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling gitServiceListBranches().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/app/{name}/git/branch`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1GitListBranchesResponseFromJSON(jsonValue));
    }

    /**
     */
    async gitServiceListBranches(requestParameters: GitServiceListBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1GitListBranchesResponse> {
        const response = await this.gitServiceListBranchesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async gitServiceListCommitsRaw(requestParameters: GitServiceListCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1GitListCommitsResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling gitServiceListCommits().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling gitServiceListCommits().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageCurrent'] != null) {
            queryParameters['page.current'] = requestParameters['pageCurrent'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page.size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/app/{name}/git/branch/{branchName}/commit`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1GitListCommitsResponseFromJSON(jsonValue));
    }

    /**
     */
    async gitServiceListCommits(requestParameters: GitServiceListCommitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1GitListCommitsResponse> {
        const response = await this.gitServiceListCommitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
