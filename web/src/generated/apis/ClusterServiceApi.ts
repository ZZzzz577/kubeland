/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
    ApiV1ClusterCluster,
    ApiV1ClusterConnection,
    ApiV1ClusterListClustersResponse,
    ApiV1ClusterResolveKubeConfigRequest,
    ApiV1ClusterResolveKubeConfigResponse,
    ApiV1ClusterTestConnectionResponse,
} from "../models/index";
import {
    ApiV1ClusterClusterFromJSON,
    ApiV1ClusterClusterToJSON,
    ApiV1ClusterConnectionFromJSON,
    ApiV1ClusterConnectionToJSON,
    ApiV1ClusterListClustersResponseFromJSON,
    ApiV1ClusterListClustersResponseToJSON,
    ApiV1ClusterResolveKubeConfigRequestFromJSON,
    ApiV1ClusterResolveKubeConfigRequestToJSON,
    ApiV1ClusterResolveKubeConfigResponseFromJSON,
    ApiV1ClusterResolveKubeConfigResponseToJSON,
    ApiV1ClusterTestConnectionResponseFromJSON,
    ApiV1ClusterTestConnectionResponseToJSON,
} from "../models/index";

export interface ClusterServiceCreateClusterRequest {
    apiV1ClusterCluster: Omit<ApiV1ClusterCluster, "createdAt" | "updatedAt">;
}

export interface ClusterServiceDeleteClusterRequest {
    id: string;
}

export interface ClusterServiceGetClusterRequest {
    id: string;
}

export interface ClusterServiceListClustersRequest {
    pageCurrent?: number;
    pageSize?: number;
}

export interface ClusterServiceResolveKubeConfigRequest {
    apiV1ClusterResolveKubeConfigRequest: ApiV1ClusterResolveKubeConfigRequest;
}

export interface ClusterServiceTestConnectionRequest {
    apiV1ClusterConnection: ApiV1ClusterConnection;
}

export interface ClusterServiceTestOperatorRequest {
    apiV1ClusterConnection: ApiV1ClusterConnection;
}

export interface ClusterServiceUpdateClusterRequest {
    id: string;
    apiV1ClusterCluster: Omit<ApiV1ClusterCluster, "createdAt" | "updatedAt">;
}

/**
 *
 */
export class ClusterServiceApi extends runtime.BaseAPI {
    /**
     */
    async clusterServiceCreateClusterRaw(
        requestParameters: ClusterServiceCreateClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["apiV1ClusterCluster"] == null) {
            throw new runtime.RequiredError(
                "apiV1ClusterCluster",
                'Required parameter "apiV1ClusterCluster" was null or undefined when calling clusterServiceCreateCluster().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/v1/cluster`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiV1ClusterClusterToJSON(requestParameters["apiV1ClusterCluster"]),
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterServiceCreateCluster(
        requestParameters: ClusterServiceCreateClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.clusterServiceCreateClusterRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clusterServiceDeleteClusterRaw(
        requestParameters: ClusterServiceDeleteClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling clusterServiceDeleteCluster().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/v1/cluster/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterServiceDeleteCluster(
        requestParameters: ClusterServiceDeleteClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.clusterServiceDeleteClusterRaw(requestParameters, initOverrides);
    }

    /**
     */
    async clusterServiceGetClusterRaw(
        requestParameters: ClusterServiceGetClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ApiV1ClusterCluster>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling clusterServiceGetCluster().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/v1/cluster/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ClusterClusterFromJSON(jsonValue));
    }

    /**
     */
    async clusterServiceGetCluster(
        requestParameters: ClusterServiceGetClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ApiV1ClusterCluster> {
        const response = await this.clusterServiceGetClusterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterServiceListClustersRaw(
        requestParameters: ClusterServiceListClustersRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ApiV1ClusterListClustersResponse>> {
        const queryParameters: any = {};

        if (requestParameters["pageCurrent"] != null) {
            queryParameters["page.current"] = requestParameters["pageCurrent"];
        }

        if (requestParameters["pageSize"] != null) {
            queryParameters["page.size"] = requestParameters["pageSize"];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        let urlPath = `/api/v1/cluster`;

        const response = await this.request(
            {
                path: urlPath,
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ApiV1ClusterListClustersResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async clusterServiceListClusters(
        requestParameters: ClusterServiceListClustersRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ApiV1ClusterListClustersResponse> {
        const response = await this.clusterServiceListClustersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterServiceResolveKubeConfigRaw(
        requestParameters: ClusterServiceResolveKubeConfigRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ApiV1ClusterResolveKubeConfigResponse>> {
        if (requestParameters["apiV1ClusterResolveKubeConfigRequest"] == null) {
            throw new runtime.RequiredError(
                "apiV1ClusterResolveKubeConfigRequest",
                'Required parameter "apiV1ClusterResolveKubeConfigRequest" was null or undefined when calling clusterServiceResolveKubeConfig().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/v1/cluster/kube/config`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiV1ClusterResolveKubeConfigRequestToJSON(
                    requestParameters["apiV1ClusterResolveKubeConfigRequest"],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ApiV1ClusterResolveKubeConfigResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async clusterServiceResolveKubeConfig(
        requestParameters: ClusterServiceResolveKubeConfigRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ApiV1ClusterResolveKubeConfigResponse> {
        const response = await this.clusterServiceResolveKubeConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterServiceTestConnectionRaw(
        requestParameters: ClusterServiceTestConnectionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<ApiV1ClusterTestConnectionResponse>> {
        if (requestParameters["apiV1ClusterConnection"] == null) {
            throw new runtime.RequiredError(
                "apiV1ClusterConnection",
                'Required parameter "apiV1ClusterConnection" was null or undefined when calling clusterServiceTestConnection().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/v1/cluster/connection/test`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiV1ClusterConnectionToJSON(requestParameters["apiV1ClusterConnection"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            ApiV1ClusterTestConnectionResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async clusterServiceTestConnection(
        requestParameters: ClusterServiceTestConnectionRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<ApiV1ClusterTestConnectionResponse> {
        const response = await this.clusterServiceTestConnectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterServiceTestOperatorRaw(
        requestParameters: ClusterServiceTestOperatorRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        if (requestParameters["apiV1ClusterConnection"] == null) {
            throw new runtime.RequiredError(
                "apiV1ClusterConnection",
                'Required parameter "apiV1ClusterConnection" was null or undefined when calling clusterServiceTestOperator().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/v1/cluster/operator/test`;

        const response = await this.request(
            {
                path: urlPath,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: ApiV1ClusterConnectionToJSON(requestParameters["apiV1ClusterConnection"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async clusterServiceTestOperator(
        requestParameters: ClusterServiceTestOperatorRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.clusterServiceTestOperatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clusterServiceUpdateClusterRaw(
        requestParameters: ClusterServiceUpdateClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["id"] == null) {
            throw new runtime.RequiredError(
                "id",
                'Required parameter "id" was null or undefined when calling clusterServiceUpdateCluster().',
            );
        }

        if (requestParameters["apiV1ClusterCluster"] == null) {
            throw new runtime.RequiredError(
                "apiV1ClusterCluster",
                'Required parameter "apiV1ClusterCluster" was null or undefined when calling clusterServiceUpdateCluster().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        let urlPath = `/api/v1/cluster/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters["id"])));

        const response = await this.request(
            {
                path: urlPath,
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: ApiV1ClusterClusterToJSON(requestParameters["apiV1ClusterCluster"]),
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async clusterServiceUpdateCluster(
        requestParameters: ClusterServiceUpdateClusterRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.clusterServiceUpdateClusterRaw(requestParameters, initOverrides);
    }
}
