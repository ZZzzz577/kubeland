/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1BuildTaskCreateBuildTaskRequest,
  ApiV1BuildTaskListBuildTaskResponse,
} from '../models/index';
import {
    ApiV1BuildTaskCreateBuildTaskRequestFromJSON,
    ApiV1BuildTaskCreateBuildTaskRequestToJSON,
    ApiV1BuildTaskListBuildTaskResponseFromJSON,
    ApiV1BuildTaskListBuildTaskResponseToJSON,
} from '../models/index';

export interface BuildTaskServiceCreateRequest {
    appName: string;
    apiV1BuildTaskCreateBuildTaskRequest: ApiV1BuildTaskCreateBuildTaskRequest;
}

export interface BuildTaskServiceListRequest {
    name: string;
}

/**
 * 
 */
export class BuildTaskServiceApi extends runtime.BaseAPI {

    /**
     */
    async buildTaskServiceCreateRaw(requestParameters: BuildTaskServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling buildTaskServiceCreate().'
            );
        }

        if (requestParameters['apiV1BuildTaskCreateBuildTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'apiV1BuildTaskCreateBuildTaskRequest',
                'Required parameter "apiV1BuildTaskCreateBuildTaskRequest" was null or undefined when calling buildTaskServiceCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/app/{appName}/build/task`;
        urlPath = urlPath.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters['appName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1BuildTaskCreateBuildTaskRequestToJSON(requestParameters['apiV1BuildTaskCreateBuildTaskRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buildTaskServiceCreate(requestParameters: BuildTaskServiceCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buildTaskServiceCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async buildTaskServiceListRaw(requestParameters: BuildTaskServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1BuildTaskListBuildTaskResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling buildTaskServiceList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/app/{name}/build/task`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1BuildTaskListBuildTaskResponseFromJSON(jsonValue));
    }

    /**
     */
    async buildTaskServiceList(requestParameters: BuildTaskServiceListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1BuildTaskListBuildTaskResponse> {
        const response = await this.buildTaskServiceListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
