/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ImageImageRepo,
  ApiV1ImageListImageReposResponse,
} from '../models/index';
import {
    ApiV1ImageImageRepoFromJSON,
    ApiV1ImageImageRepoToJSON,
    ApiV1ImageListImageReposResponseFromJSON,
    ApiV1ImageListImageReposResponseToJSON,
} from '../models/index';

export interface ImageServiceCreateImageRepoRequest {
    apiV1ImageImageRepo: Omit<ApiV1ImageImageRepo, 'createdAt'|'updatedAt'>;
}

export interface ImageServiceDeleteImageRepoRequest {
    name: string;
}

export interface ImageServiceGetImageRepoRequest {
    name: string;
}

export interface ImageServiceListImageReposRequest {
    pageCurrent?: number;
    pageSize?: number;
}

export interface ImageServiceUpdateImageRepoRequest {
    name: string;
    apiV1ImageImageRepo: Omit<ApiV1ImageImageRepo, 'createdAt'|'updatedAt'>;
}

/**
 * 
 */
export class ImageServiceApi extends runtime.BaseAPI {

    /**
     */
    async imageServiceCreateImageRepoRaw(requestParameters: ImageServiceCreateImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['apiV1ImageImageRepo'] == null) {
            throw new runtime.RequiredError(
                'apiV1ImageImageRepo',
                'Required parameter "apiV1ImageImageRepo" was null or undefined when calling imageServiceCreateImageRepo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/image/repo`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ImageImageRepoToJSON(requestParameters['apiV1ImageImageRepo']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async imageServiceCreateImageRepo(requestParameters: ImageServiceCreateImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imageServiceCreateImageRepoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async imageServiceDeleteImageRepoRaw(requestParameters: ImageServiceDeleteImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling imageServiceDeleteImageRepo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/image/repo/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async imageServiceDeleteImageRepo(requestParameters: ImageServiceDeleteImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imageServiceDeleteImageRepoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async imageServiceGetImageRepoRaw(requestParameters: ImageServiceGetImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ImageImageRepo>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling imageServiceGetImageRepo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/image/repo/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ImageImageRepoFromJSON(jsonValue));
    }

    /**
     */
    async imageServiceGetImageRepo(requestParameters: ImageServiceGetImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ImageImageRepo> {
        const response = await this.imageServiceGetImageRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async imageServiceListImageReposRaw(requestParameters: ImageServiceListImageReposRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ImageListImageReposResponse>> {
        const queryParameters: any = {};

        if (requestParameters['pageCurrent'] != null) {
            queryParameters['page.current'] = requestParameters['pageCurrent'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page.size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/image/repo`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ImageListImageReposResponseFromJSON(jsonValue));
    }

    /**
     */
    async imageServiceListImageRepos(requestParameters: ImageServiceListImageReposRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ImageListImageReposResponse> {
        const response = await this.imageServiceListImageReposRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async imageServiceUpdateImageRepoRaw(requestParameters: ImageServiceUpdateImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling imageServiceUpdateImageRepo().'
            );
        }

        if (requestParameters['apiV1ImageImageRepo'] == null) {
            throw new runtime.RequiredError(
                'apiV1ImageImageRepo',
                'Required parameter "apiV1ImageImageRepo" was null or undefined when calling imageServiceUpdateImageRepo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/image/repo/{name}`;
        urlPath = urlPath.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ImageImageRepoToJSON(requestParameters['apiV1ImageImageRepo']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async imageServiceUpdateImageRepo(requestParameters: ImageServiceUpdateImageRepoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.imageServiceUpdateImageRepoRaw(requestParameters, initOverrides);
    }

}
