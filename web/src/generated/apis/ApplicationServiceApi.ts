/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiV1ApplicationApplication,
  ApiV1ApplicationListApplicationsResponse,
} from '../models/index';
import {
    ApiV1ApplicationApplicationFromJSON,
    ApiV1ApplicationApplicationToJSON,
    ApiV1ApplicationListApplicationsResponseFromJSON,
    ApiV1ApplicationListApplicationsResponseToJSON,
} from '../models/index';

export interface ApplicationServiceCreateApplicationRequest {
    apiV1ApplicationApplication: Omit<ApiV1ApplicationApplication, 'createdAt'|'updateAt'>;
}

export interface ApplicationServiceDeleteApplicationRequest {
    id: string;
}

export interface ApplicationServiceGetApplicationRequest {
    id: string;
}

export interface ApplicationServiceListApplicationsRequest {
    pageCurrent?: number;
    pageSize?: number;
}

export interface ApplicationServiceUpdateApplicationRequest {
    id: string;
    apiV1ApplicationApplication: Omit<ApiV1ApplicationApplication, 'createdAt'|'updateAt'>;
}

/**
 * 
 */
export class ApplicationServiceApi extends runtime.BaseAPI {

    /**
     */
    async applicationServiceCreateApplicationRaw(requestParameters: ApplicationServiceCreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['apiV1ApplicationApplication'] == null) {
            throw new runtime.RequiredError(
                'apiV1ApplicationApplication',
                'Required parameter "apiV1ApplicationApplication" was null or undefined when calling applicationServiceCreateApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/application`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ApplicationApplicationToJSON(requestParameters['apiV1ApplicationApplication']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationServiceCreateApplication(requestParameters: ApplicationServiceCreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationServiceCreateApplicationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationServiceDeleteApplicationRaw(requestParameters: ApplicationServiceDeleteApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applicationServiceDeleteApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/application/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationServiceDeleteApplication(requestParameters: ApplicationServiceDeleteApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationServiceDeleteApplicationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async applicationServiceGetApplicationRaw(requestParameters: ApplicationServiceGetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ApplicationApplication>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applicationServiceGetApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/application/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ApplicationApplicationFromJSON(jsonValue));
    }

    /**
     */
    async applicationServiceGetApplication(requestParameters: ApplicationServiceGetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ApplicationApplication> {
        const response = await this.applicationServiceGetApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async applicationServiceListApplicationsRaw(requestParameters: ApplicationServiceListApplicationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiV1ApplicationListApplicationsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['pageCurrent'] != null) {
            queryParameters['page.current'] = requestParameters['pageCurrent'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page.size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/application`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiV1ApplicationListApplicationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationServiceListApplications(requestParameters: ApplicationServiceListApplicationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiV1ApplicationListApplicationsResponse> {
        const response = await this.applicationServiceListApplicationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async applicationServiceUpdateApplicationRaw(requestParameters: ApplicationServiceUpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling applicationServiceUpdateApplication().'
            );
        }

        if (requestParameters['apiV1ApplicationApplication'] == null) {
            throw new runtime.RequiredError(
                'apiV1ApplicationApplication',
                'Required parameter "apiV1ApplicationApplication" was null or undefined when calling applicationServiceUpdateApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/application/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiV1ApplicationApplicationToJSON(requestParameters['apiV1ApplicationApplication']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationServiceUpdateApplication(requestParameters: ApplicationServiceUpdateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.applicationServiceUpdateApplicationRaw(requestParameters, initOverrides);
    }

}
