// Code generated by ent, DO NOT EDIT.

package generated

import (
	"api-server/internal/data/generated/imagerepo"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ImageRepo is the model entity for the ImageRepo schema.
type ImageRepo struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt time.Time `json:"delete_at,omitempty"`
	// 镜像仓库名称
	Name string `json:"name,omitempty"`
	// 镜像仓库描述
	Description string `json:"description,omitempty"`
	// 镜像仓库地址
	URL string `json:"url,omitempty"`
	// 镜像仓库用户名
	Username string `json:"username,omitempty"`
	// 镜像仓库密码
	Password     string `json:"password,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImageRepo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imagerepo.FieldID:
			values[i] = new(sql.NullInt64)
		case imagerepo.FieldName, imagerepo.FieldDescription, imagerepo.FieldURL, imagerepo.FieldUsername, imagerepo.FieldPassword:
			values[i] = new(sql.NullString)
		case imagerepo.FieldCreatedAt, imagerepo.FieldUpdatedAt, imagerepo.FieldDeleteAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImageRepo fields.
func (_m *ImageRepo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case imagerepo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint64(value.Int64)
		case imagerepo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case imagerepo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case imagerepo.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				_m.DeleteAt = value.Time
			}
		case imagerepo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case imagerepo.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case imagerepo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				_m.URL = value.String
			}
		case imagerepo.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				_m.Username = value.String
			}
		case imagerepo.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				_m.Password = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImageRepo.
// This includes values selected through modifiers, order, etc.
func (_m *ImageRepo) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ImageRepo.
// Note that you need to call ImageRepo.Unwrap() before calling this method if this ImageRepo
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ImageRepo) Update() *ImageRepoUpdateOne {
	return NewImageRepoClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ImageRepo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ImageRepo) Unwrap() *ImageRepo {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ImageRepo is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ImageRepo) String() string {
	var builder strings.Builder
	builder.WriteString("ImageRepo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(_m.DeleteAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(_m.URL)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(_m.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(_m.Password)
	builder.WriteByte(')')
	return builder.String()
}

// ImageRepos is a parsable slice of ImageRepo.
type ImageRepos []*ImageRepo
