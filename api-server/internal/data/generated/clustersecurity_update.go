// Code generated by ent, DO NOT EDIT.

package generated

import (
	"api-server/internal/data/generated/cluster"
	"api-server/internal/data/generated/clustersecurity"
	"api-server/internal/data/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClusterSecurityUpdate is the builder for updating ClusterSecurity entities.
type ClusterSecurityUpdate struct {
	config
	hooks    []Hook
	mutation *ClusterSecurityMutation
}

// Where appends a list predicates to the ClusterSecurityUpdate builder.
func (_u *ClusterSecurityUpdate) Where(ps ...predicate.ClusterSecurity) *ClusterSecurityUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ClusterSecurityUpdate) SetUpdatedAt(v time.Time) *ClusterSecurityUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *ClusterSecurityUpdate) SetDeleteAt(v time.Time) *ClusterSecurityUpdate {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *ClusterSecurityUpdate) SetNillableDeleteAt(v *time.Time) *ClusterSecurityUpdate {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (_u *ClusterSecurityUpdate) ClearDeleteAt() *ClusterSecurityUpdate {
	_u.mutation.ClearDeleteAt()
	return _u
}

// SetClusterID sets the "cluster_id" field.
func (_u *ClusterSecurityUpdate) SetClusterID(v uint64) *ClusterSecurityUpdate {
	_u.mutation.SetClusterID(v)
	return _u
}

// SetNillableClusterID sets the "cluster_id" field if the given value is not nil.
func (_u *ClusterSecurityUpdate) SetNillableClusterID(v *uint64) *ClusterSecurityUpdate {
	if v != nil {
		_u.SetClusterID(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ClusterSecurityUpdate) SetType(v uint8) *ClusterSecurityUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ClusterSecurityUpdate) SetNillableType(v *uint8) *ClusterSecurityUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *ClusterSecurityUpdate) AddType(v int8) *ClusterSecurityUpdate {
	_u.mutation.AddType(v)
	return _u
}

// SetCa sets the "ca" field.
func (_u *ClusterSecurityUpdate) SetCa(v string) *ClusterSecurityUpdate {
	_u.mutation.SetCa(v)
	return _u
}

// SetNillableCa sets the "ca" field if the given value is not nil.
func (_u *ClusterSecurityUpdate) SetNillableCa(v *string) *ClusterSecurityUpdate {
	if v != nil {
		_u.SetCa(*v)
	}
	return _u
}

// SetCert sets the "cert" field.
func (_u *ClusterSecurityUpdate) SetCert(v string) *ClusterSecurityUpdate {
	_u.mutation.SetCert(v)
	return _u
}

// SetNillableCert sets the "cert" field if the given value is not nil.
func (_u *ClusterSecurityUpdate) SetNillableCert(v *string) *ClusterSecurityUpdate {
	if v != nil {
		_u.SetCert(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *ClusterSecurityUpdate) SetKey(v string) *ClusterSecurityUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *ClusterSecurityUpdate) SetNillableKey(v *string) *ClusterSecurityUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *ClusterSecurityUpdate) SetToken(v string) *ClusterSecurityUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *ClusterSecurityUpdate) SetNillableToken(v *string) *ClusterSecurityUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetCluster sets the "cluster" edge to the Cluster entity.
func (_u *ClusterSecurityUpdate) SetCluster(v *Cluster) *ClusterSecurityUpdate {
	return _u.SetClusterID(v.ID)
}

// Mutation returns the ClusterSecurityMutation object of the builder.
func (_u *ClusterSecurityUpdate) Mutation() *ClusterSecurityMutation {
	return _u.mutation
}

// ClearCluster clears the "cluster" edge to the Cluster entity.
func (_u *ClusterSecurityUpdate) ClearCluster() *ClusterSecurityUpdate {
	_u.mutation.ClearCluster()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ClusterSecurityUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClusterSecurityUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ClusterSecurityUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClusterSecurityUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ClusterSecurityUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if clustersecurity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized clustersecurity.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := clustersecurity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ClusterSecurityUpdate) check() error {
	if _u.mutation.ClusterCleared() && len(_u.mutation.ClusterIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ClusterSecurity.cluster"`)
	}
	return nil
}

func (_u *ClusterSecurityUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clustersecurity.Table, clustersecurity.Columns, sqlgraph.NewFieldSpec(clustersecurity.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(clustersecurity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(clustersecurity.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.DeleteAtCleared() {
		_spec.ClearField(clustersecurity.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(clustersecurity.FieldType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(clustersecurity.FieldType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.Ca(); ok {
		_spec.SetField(clustersecurity.FieldCa, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cert(); ok {
		_spec.SetField(clustersecurity.FieldCert, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(clustersecurity.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(clustersecurity.FieldToken, field.TypeString, value)
	}
	if _u.mutation.ClusterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   clustersecurity.ClusterTable,
			Columns: []string{clustersecurity.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClusterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   clustersecurity.ClusterTable,
			Columns: []string{clustersecurity.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clustersecurity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ClusterSecurityUpdateOne is the builder for updating a single ClusterSecurity entity.
type ClusterSecurityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClusterSecurityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ClusterSecurityUpdateOne) SetUpdatedAt(v time.Time) *ClusterSecurityUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *ClusterSecurityUpdateOne) SetDeleteAt(v time.Time) *ClusterSecurityUpdateOne {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *ClusterSecurityUpdateOne) SetNillableDeleteAt(v *time.Time) *ClusterSecurityUpdateOne {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (_u *ClusterSecurityUpdateOne) ClearDeleteAt() *ClusterSecurityUpdateOne {
	_u.mutation.ClearDeleteAt()
	return _u
}

// SetClusterID sets the "cluster_id" field.
func (_u *ClusterSecurityUpdateOne) SetClusterID(v uint64) *ClusterSecurityUpdateOne {
	_u.mutation.SetClusterID(v)
	return _u
}

// SetNillableClusterID sets the "cluster_id" field if the given value is not nil.
func (_u *ClusterSecurityUpdateOne) SetNillableClusterID(v *uint64) *ClusterSecurityUpdateOne {
	if v != nil {
		_u.SetClusterID(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *ClusterSecurityUpdateOne) SetType(v uint8) *ClusterSecurityUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ClusterSecurityUpdateOne) SetNillableType(v *uint8) *ClusterSecurityUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *ClusterSecurityUpdateOne) AddType(v int8) *ClusterSecurityUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// SetCa sets the "ca" field.
func (_u *ClusterSecurityUpdateOne) SetCa(v string) *ClusterSecurityUpdateOne {
	_u.mutation.SetCa(v)
	return _u
}

// SetNillableCa sets the "ca" field if the given value is not nil.
func (_u *ClusterSecurityUpdateOne) SetNillableCa(v *string) *ClusterSecurityUpdateOne {
	if v != nil {
		_u.SetCa(*v)
	}
	return _u
}

// SetCert sets the "cert" field.
func (_u *ClusterSecurityUpdateOne) SetCert(v string) *ClusterSecurityUpdateOne {
	_u.mutation.SetCert(v)
	return _u
}

// SetNillableCert sets the "cert" field if the given value is not nil.
func (_u *ClusterSecurityUpdateOne) SetNillableCert(v *string) *ClusterSecurityUpdateOne {
	if v != nil {
		_u.SetCert(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *ClusterSecurityUpdateOne) SetKey(v string) *ClusterSecurityUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *ClusterSecurityUpdateOne) SetNillableKey(v *string) *ClusterSecurityUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *ClusterSecurityUpdateOne) SetToken(v string) *ClusterSecurityUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *ClusterSecurityUpdateOne) SetNillableToken(v *string) *ClusterSecurityUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetCluster sets the "cluster" edge to the Cluster entity.
func (_u *ClusterSecurityUpdateOne) SetCluster(v *Cluster) *ClusterSecurityUpdateOne {
	return _u.SetClusterID(v.ID)
}

// Mutation returns the ClusterSecurityMutation object of the builder.
func (_u *ClusterSecurityUpdateOne) Mutation() *ClusterSecurityMutation {
	return _u.mutation
}

// ClearCluster clears the "cluster" edge to the Cluster entity.
func (_u *ClusterSecurityUpdateOne) ClearCluster() *ClusterSecurityUpdateOne {
	_u.mutation.ClearCluster()
	return _u
}

// Where appends a list predicates to the ClusterSecurityUpdate builder.
func (_u *ClusterSecurityUpdateOne) Where(ps ...predicate.ClusterSecurity) *ClusterSecurityUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ClusterSecurityUpdateOne) Select(field string, fields ...string) *ClusterSecurityUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ClusterSecurity entity.
func (_u *ClusterSecurityUpdateOne) Save(ctx context.Context) (*ClusterSecurity, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ClusterSecurityUpdateOne) SaveX(ctx context.Context) *ClusterSecurity {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ClusterSecurityUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ClusterSecurityUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ClusterSecurityUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if clustersecurity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized clustersecurity.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := clustersecurity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ClusterSecurityUpdateOne) check() error {
	if _u.mutation.ClusterCleared() && len(_u.mutation.ClusterIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ClusterSecurity.cluster"`)
	}
	return nil
}

func (_u *ClusterSecurityUpdateOne) sqlSave(ctx context.Context) (_node *ClusterSecurity, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clustersecurity.Table, clustersecurity.Columns, sqlgraph.NewFieldSpec(clustersecurity.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ClusterSecurity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clustersecurity.FieldID)
		for _, f := range fields {
			if !clustersecurity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != clustersecurity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(clustersecurity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(clustersecurity.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.DeleteAtCleared() {
		_spec.ClearField(clustersecurity.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(clustersecurity.FieldType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(clustersecurity.FieldType, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.Ca(); ok {
		_spec.SetField(clustersecurity.FieldCa, field.TypeString, value)
	}
	if value, ok := _u.mutation.Cert(); ok {
		_spec.SetField(clustersecurity.FieldCert, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(clustersecurity.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(clustersecurity.FieldToken, field.TypeString, value)
	}
	if _u.mutation.ClusterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   clustersecurity.ClusterTable,
			Columns: []string{clustersecurity.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClusterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   clustersecurity.ClusterTable,
			Columns: []string{clustersecurity.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClusterSecurity{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clustersecurity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
