// Code generated by ent, DO NOT EDIT.

package generated

import (
	"api-server/internal/data/generated/cluster"
	"api-server/internal/data/generated/clustersecurity"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ClusterSecurityCreate is the builder for creating a ClusterSecurity entity.
type ClusterSecurityCreate struct {
	config
	mutation *ClusterSecurityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *ClusterSecurityCreate) SetCreatedAt(v time.Time) *ClusterSecurityCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ClusterSecurityCreate) SetNillableCreatedAt(v *time.Time) *ClusterSecurityCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ClusterSecurityCreate) SetUpdatedAt(v time.Time) *ClusterSecurityCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ClusterSecurityCreate) SetNillableUpdatedAt(v *time.Time) *ClusterSecurityCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeleteAt sets the "delete_at" field.
func (_c *ClusterSecurityCreate) SetDeleteAt(v time.Time) *ClusterSecurityCreate {
	_c.mutation.SetDeleteAt(v)
	return _c
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_c *ClusterSecurityCreate) SetNillableDeleteAt(v *time.Time) *ClusterSecurityCreate {
	if v != nil {
		_c.SetDeleteAt(*v)
	}
	return _c
}

// SetClusterID sets the "cluster_id" field.
func (_c *ClusterSecurityCreate) SetClusterID(v uint64) *ClusterSecurityCreate {
	_c.mutation.SetClusterID(v)
	return _c
}

// SetType sets the "type" field.
func (_c *ClusterSecurityCreate) SetType(v uint8) *ClusterSecurityCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetCa sets the "ca" field.
func (_c *ClusterSecurityCreate) SetCa(v string) *ClusterSecurityCreate {
	_c.mutation.SetCa(v)
	return _c
}

// SetNillableCa sets the "ca" field if the given value is not nil.
func (_c *ClusterSecurityCreate) SetNillableCa(v *string) *ClusterSecurityCreate {
	if v != nil {
		_c.SetCa(*v)
	}
	return _c
}

// SetCert sets the "cert" field.
func (_c *ClusterSecurityCreate) SetCert(v string) *ClusterSecurityCreate {
	_c.mutation.SetCert(v)
	return _c
}

// SetNillableCert sets the "cert" field if the given value is not nil.
func (_c *ClusterSecurityCreate) SetNillableCert(v *string) *ClusterSecurityCreate {
	if v != nil {
		_c.SetCert(*v)
	}
	return _c
}

// SetKey sets the "key" field.
func (_c *ClusterSecurityCreate) SetKey(v string) *ClusterSecurityCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_c *ClusterSecurityCreate) SetNillableKey(v *string) *ClusterSecurityCreate {
	if v != nil {
		_c.SetKey(*v)
	}
	return _c
}

// SetToken sets the "token" field.
func (_c *ClusterSecurityCreate) SetToken(v string) *ClusterSecurityCreate {
	_c.mutation.SetToken(v)
	return _c
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_c *ClusterSecurityCreate) SetNillableToken(v *string) *ClusterSecurityCreate {
	if v != nil {
		_c.SetToken(*v)
	}
	return _c
}

// SetCluster sets the "cluster" edge to the Cluster entity.
func (_c *ClusterSecurityCreate) SetCluster(v *Cluster) *ClusterSecurityCreate {
	return _c.SetClusterID(v.ID)
}

// Mutation returns the ClusterSecurityMutation object of the builder.
func (_c *ClusterSecurityCreate) Mutation() *ClusterSecurityMutation {
	return _c.mutation
}

// Save creates the ClusterSecurity in the database.
func (_c *ClusterSecurityCreate) Save(ctx context.Context) (*ClusterSecurity, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ClusterSecurityCreate) SaveX(ctx context.Context) *ClusterSecurity {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ClusterSecurityCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ClusterSecurityCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ClusterSecurityCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if clustersecurity.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized clustersecurity.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := clustersecurity.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if clustersecurity.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized clustersecurity.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := clustersecurity.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Ca(); !ok {
		v := clustersecurity.DefaultCa
		_c.mutation.SetCa(v)
	}
	if _, ok := _c.mutation.Cert(); !ok {
		v := clustersecurity.DefaultCert
		_c.mutation.SetCert(v)
	}
	if _, ok := _c.mutation.Key(); !ok {
		v := clustersecurity.DefaultKey
		_c.mutation.SetKey(v)
	}
	if _, ok := _c.mutation.Token(); !ok {
		v := clustersecurity.DefaultToken
		_c.mutation.SetToken(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ClusterSecurityCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "ClusterSecurity.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "ClusterSecurity.updated_at"`)}
	}
	if _, ok := _c.mutation.ClusterID(); !ok {
		return &ValidationError{Name: "cluster_id", err: errors.New(`generated: missing required field "ClusterSecurity.cluster_id"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`generated: missing required field "ClusterSecurity.type"`)}
	}
	if _, ok := _c.mutation.Ca(); !ok {
		return &ValidationError{Name: "ca", err: errors.New(`generated: missing required field "ClusterSecurity.ca"`)}
	}
	if _, ok := _c.mutation.Cert(); !ok {
		return &ValidationError{Name: "cert", err: errors.New(`generated: missing required field "ClusterSecurity.cert"`)}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`generated: missing required field "ClusterSecurity.key"`)}
	}
	if _, ok := _c.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "ClusterSecurity.token"`)}
	}
	if len(_c.mutation.ClusterIDs()) == 0 {
		return &ValidationError{Name: "cluster", err: errors.New(`generated: missing required edge "ClusterSecurity.cluster"`)}
	}
	return nil
}

func (_c *ClusterSecurityCreate) sqlSave(ctx context.Context) (*ClusterSecurity, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ClusterSecurityCreate) createSpec() (*ClusterSecurity, *sqlgraph.CreateSpec) {
	var (
		_node = &ClusterSecurity{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(clustersecurity.Table, sqlgraph.NewFieldSpec(clustersecurity.FieldID, field.TypeUint64))
	)
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(clustersecurity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(clustersecurity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeleteAt(); ok {
		_spec.SetField(clustersecurity.FieldDeleteAt, field.TypeTime, value)
		_node.DeleteAt = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(clustersecurity.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Ca(); ok {
		_spec.SetField(clustersecurity.FieldCa, field.TypeString, value)
		_node.Ca = value
	}
	if value, ok := _c.mutation.Cert(); ok {
		_spec.SetField(clustersecurity.FieldCert, field.TypeString, value)
		_node.Cert = value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(clustersecurity.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.Token(); ok {
		_spec.SetField(clustersecurity.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if nodes := _c.mutation.ClusterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   clustersecurity.ClusterTable,
			Columns: []string{clustersecurity.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ClusterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClusterSecurityCreateBulk is the builder for creating many ClusterSecurity entities in bulk.
type ClusterSecurityCreateBulk struct {
	config
	err      error
	builders []*ClusterSecurityCreate
}

// Save creates the ClusterSecurity entities in the database.
func (_c *ClusterSecurityCreateBulk) Save(ctx context.Context) ([]*ClusterSecurity, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ClusterSecurity, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClusterSecurityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ClusterSecurityCreateBulk) SaveX(ctx context.Context) []*ClusterSecurity {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ClusterSecurityCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ClusterSecurityCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
