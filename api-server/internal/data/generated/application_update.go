// Code generated by ent, DO NOT EDIT.

package generated

import (
	"api-server/internal/data/generated/application"
	"api-server/internal/data/generated/cluster"
	"api-server/internal/data/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (_u *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ApplicationUpdate) SetUpdatedAt(v time.Time) *ApplicationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *ApplicationUpdate) SetDeleteAt(v time.Time) *ApplicationUpdate {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *ApplicationUpdate) SetNillableDeleteAt(v *time.Time) *ApplicationUpdate {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (_u *ApplicationUpdate) ClearDeleteAt() *ApplicationUpdate {
	_u.mutation.ClearDeleteAt()
	return _u
}

// SetClusterID sets the "cluster_id" field.
func (_u *ApplicationUpdate) SetClusterID(v uint64) *ApplicationUpdate {
	_u.mutation.SetClusterID(v)
	return _u
}

// SetNillableClusterID sets the "cluster_id" field if the given value is not nil.
func (_u *ApplicationUpdate) SetNillableClusterID(v *uint64) *ApplicationUpdate {
	if v != nil {
		_u.SetClusterID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ApplicationUpdate) SetName(v string) *ApplicationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ApplicationUpdate) SetNillableName(v *string) *ApplicationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ApplicationUpdate) SetDescription(v string) *ApplicationUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ApplicationUpdate) SetNillableDescription(v *string) *ApplicationUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetCluster sets the "cluster" edge to the Cluster entity.
func (_u *ApplicationUpdate) SetCluster(v *Cluster) *ApplicationUpdate {
	return _u.SetClusterID(v.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (_u *ApplicationUpdate) Mutation() *ApplicationMutation {
	return _u.mutation
}

// ClearCluster clears the "cluster" edge to the Cluster entity.
func (_u *ApplicationUpdate) ClearCluster() *ApplicationUpdate {
	_u.mutation.ClearCluster()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ApplicationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if application.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized application.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := application.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ApplicationUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := application.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Application.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := application.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Application.description": %w`, err)}
		}
	}
	if _u.mutation.ClusterCleared() && len(_u.mutation.ClusterIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Application.cluster"`)
	}
	return nil
}

func (_u *ApplicationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(application.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(application.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.DeleteAtCleared() {
		_spec.ClearField(application.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.ClusterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ClusterTable,
			Columns: []string{application.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClusterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ClusterTable,
			Columns: []string{application.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ApplicationUpdateOne) SetUpdatedAt(v time.Time) *ApplicationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *ApplicationUpdateOne) SetDeleteAt(v time.Time) *ApplicationUpdateOne {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *ApplicationUpdateOne) SetNillableDeleteAt(v *time.Time) *ApplicationUpdateOne {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (_u *ApplicationUpdateOne) ClearDeleteAt() *ApplicationUpdateOne {
	_u.mutation.ClearDeleteAt()
	return _u
}

// SetClusterID sets the "cluster_id" field.
func (_u *ApplicationUpdateOne) SetClusterID(v uint64) *ApplicationUpdateOne {
	_u.mutation.SetClusterID(v)
	return _u
}

// SetNillableClusterID sets the "cluster_id" field if the given value is not nil.
func (_u *ApplicationUpdateOne) SetNillableClusterID(v *uint64) *ApplicationUpdateOne {
	if v != nil {
		_u.SetClusterID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *ApplicationUpdateOne) SetName(v string) *ApplicationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ApplicationUpdateOne) SetNillableName(v *string) *ApplicationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ApplicationUpdateOne) SetDescription(v string) *ApplicationUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ApplicationUpdateOne) SetNillableDescription(v *string) *ApplicationUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetCluster sets the "cluster" edge to the Cluster entity.
func (_u *ApplicationUpdateOne) SetCluster(v *Cluster) *ApplicationUpdateOne {
	return _u.SetClusterID(v.ID)
}

// Mutation returns the ApplicationMutation object of the builder.
func (_u *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return _u.mutation
}

// ClearCluster clears the "cluster" edge to the Cluster entity.
func (_u *ApplicationUpdateOne) ClearCluster() *ApplicationUpdateOne {
	_u.mutation.ClearCluster()
	return _u
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (_u *ApplicationUpdateOne) Where(ps ...predicate.Application) *ApplicationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Application entity.
func (_u *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ApplicationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if application.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized application.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := application.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ApplicationUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := application.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Application.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := application.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "Application.description": %w`, err)}
		}
	}
	if _u.mutation.ClusterCleared() && len(_u.mutation.ClusterIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Application.cluster"`)
	}
	return nil
}

func (_u *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Application.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(application.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(application.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.DeleteAtCleared() {
		_spec.ClearField(application.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(application.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.ClusterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ClusterTable,
			Columns: []string{application.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ClusterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   application.ClusterTable,
			Columns: []string{application.ClusterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Application{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
