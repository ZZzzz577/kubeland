// Code generated by ent, DO NOT EDIT.

package generated

import (
	"api-server/internal/data/generated/gitrepo"
	"api-server/internal/data/generated/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GitRepoUpdate is the builder for updating GitRepo entities.
type GitRepoUpdate struct {
	config
	hooks    []Hook
	mutation *GitRepoMutation
}

// Where appends a list predicates to the GitRepoUpdate builder.
func (_u *GitRepoUpdate) Where(ps ...predicate.GitRepo) *GitRepoUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GitRepoUpdate) SetUpdatedAt(v time.Time) *GitRepoUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *GitRepoUpdate) SetDeleteAt(v time.Time) *GitRepoUpdate {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *GitRepoUpdate) SetNillableDeleteAt(v *time.Time) *GitRepoUpdate {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (_u *GitRepoUpdate) ClearDeleteAt() *GitRepoUpdate {
	_u.mutation.ClearDeleteAt()
	return _u
}

// SetName sets the "name" field.
func (_u *GitRepoUpdate) SetName(v string) *GitRepoUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GitRepoUpdate) SetNillableName(v *string) *GitRepoUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *GitRepoUpdate) SetDescription(v string) *GitRepoUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *GitRepoUpdate) SetNillableDescription(v *string) *GitRepoUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *GitRepoUpdate) SetURL(v string) *GitRepoUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *GitRepoUpdate) SetNillableURL(v *string) *GitRepoUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *GitRepoUpdate) SetToken(v string) *GitRepoUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *GitRepoUpdate) SetNillableToken(v *string) *GitRepoUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// Mutation returns the GitRepoMutation object of the builder.
func (_u *GitRepoUpdate) Mutation() *GitRepoMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GitRepoUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GitRepoUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GitRepoUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GitRepoUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GitRepoUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if gitrepo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized gitrepo.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := gitrepo.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *GitRepoUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := gitrepo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "GitRepo.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := gitrepo.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "GitRepo.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := gitrepo.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "GitRepo.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := gitrepo.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "GitRepo.token": %w`, err)}
		}
	}
	return nil
}

func (_u *GitRepoUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gitrepo.Table, gitrepo.Columns, sqlgraph.NewFieldSpec(gitrepo.FieldID, field.TypeUint64))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(gitrepo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(gitrepo.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.DeleteAtCleared() {
		_spec.ClearField(gitrepo.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(gitrepo.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(gitrepo.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(gitrepo.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(gitrepo.FieldToken, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitrepo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GitRepoUpdateOne is the builder for updating a single GitRepo entity.
type GitRepoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GitRepoMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GitRepoUpdateOne) SetUpdatedAt(v time.Time) *GitRepoUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeleteAt sets the "delete_at" field.
func (_u *GitRepoUpdateOne) SetDeleteAt(v time.Time) *GitRepoUpdateOne {
	_u.mutation.SetDeleteAt(v)
	return _u
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (_u *GitRepoUpdateOne) SetNillableDeleteAt(v *time.Time) *GitRepoUpdateOne {
	if v != nil {
		_u.SetDeleteAt(*v)
	}
	return _u
}

// ClearDeleteAt clears the value of the "delete_at" field.
func (_u *GitRepoUpdateOne) ClearDeleteAt() *GitRepoUpdateOne {
	_u.mutation.ClearDeleteAt()
	return _u
}

// SetName sets the "name" field.
func (_u *GitRepoUpdateOne) SetName(v string) *GitRepoUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *GitRepoUpdateOne) SetNillableName(v *string) *GitRepoUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *GitRepoUpdateOne) SetDescription(v string) *GitRepoUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *GitRepoUpdateOne) SetNillableDescription(v *string) *GitRepoUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetURL sets the "url" field.
func (_u *GitRepoUpdateOne) SetURL(v string) *GitRepoUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *GitRepoUpdateOne) SetNillableURL(v *string) *GitRepoUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *GitRepoUpdateOne) SetToken(v string) *GitRepoUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *GitRepoUpdateOne) SetNillableToken(v *string) *GitRepoUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// Mutation returns the GitRepoMutation object of the builder.
func (_u *GitRepoUpdateOne) Mutation() *GitRepoMutation {
	return _u.mutation
}

// Where appends a list predicates to the GitRepoUpdate builder.
func (_u *GitRepoUpdateOne) Where(ps ...predicate.GitRepo) *GitRepoUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GitRepoUpdateOne) Select(field string, fields ...string) *GitRepoUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated GitRepo entity.
func (_u *GitRepoUpdateOne) Save(ctx context.Context) (*GitRepo, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GitRepoUpdateOne) SaveX(ctx context.Context) *GitRepo {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GitRepoUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GitRepoUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GitRepoUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if gitrepo.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized gitrepo.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := gitrepo.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *GitRepoUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := gitrepo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "GitRepo.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := gitrepo.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`generated: validator failed for field "GitRepo.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.URL(); ok {
		if err := gitrepo.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`generated: validator failed for field "GitRepo.url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := gitrepo.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "GitRepo.token": %w`, err)}
		}
	}
	return nil
}

func (_u *GitRepoUpdateOne) sqlSave(ctx context.Context) (_node *GitRepo, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gitrepo.Table, gitrepo.Columns, sqlgraph.NewFieldSpec(gitrepo.FieldID, field.TypeUint64))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "GitRepo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gitrepo.FieldID)
		for _, f := range fields {
			if !gitrepo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != gitrepo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(gitrepo.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeleteAt(); ok {
		_spec.SetField(gitrepo.FieldDeleteAt, field.TypeTime, value)
	}
	if _u.mutation.DeleteAtCleared() {
		_spec.ClearField(gitrepo.FieldDeleteAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(gitrepo.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(gitrepo.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(gitrepo.FieldURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(gitrepo.FieldToken, field.TypeString, value)
	}
	_node = &GitRepo{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitrepo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
