// Code generated by ent, DO NOT EDIT.

package clusterconnection

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the clusterconnection type in the database.
	Label = "cluster_connection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeleteAt holds the string denoting the delete_at field in the database.
	FieldDeleteAt = "delete_at"
	// FieldClusterID holds the string denoting the cluster_id field in the database.
	FieldClusterID = "cluster_id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCa holds the string denoting the ca field in the database.
	FieldCa = "ca"
	// FieldCert holds the string denoting the cert field in the database.
	FieldCert = "cert"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// EdgeCluster holds the string denoting the cluster edge name in mutations.
	EdgeCluster = "cluster"
	// Table holds the table name of the clusterconnection in the database.
	Table = "cluster_connections"
	// ClusterTable is the table that holds the cluster relation/edge.
	ClusterTable = "cluster_connections"
	// ClusterInverseTable is the table name for the Cluster entity.
	// It exists in this package in order to avoid circular dependency with the "cluster" package.
	ClusterInverseTable = "clusters"
	// ClusterColumn is the table column denoting the cluster relation/edge.
	ClusterColumn = "cluster_id"
)

// Columns holds all SQL columns for clusterconnection fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeleteAt,
	FieldClusterID,
	FieldAddress,
	FieldType,
	FieldCa,
	FieldCert,
	FieldKey,
	FieldToken,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "api-server/internal/data/generated/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
	// DefaultCa holds the default value on creation for the "ca" field.
	DefaultCa string
	// DefaultCert holds the default value on creation for the "cert" field.
	DefaultCert string
	// DefaultKey holds the default value on creation for the "key" field.
	DefaultKey string
	// DefaultToken holds the default value on creation for the "token" field.
	DefaultToken string
)

// OrderOption defines the ordering options for the ClusterConnection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeleteAt orders the results by the delete_at field.
func ByDeleteAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteAt, opts...).ToFunc()
}

// ByClusterID orders the results by the cluster_id field.
func ByClusterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClusterID, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCa orders the results by the ca field.
func ByCa(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCa, opts...).ToFunc()
}

// ByCert orders the results by the cert field.
func ByCert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCert, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByClusterField orders the results by cluster field.
func ByClusterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClusterStep(), sql.OrderByField(field, opts...))
	}
}
func newClusterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClusterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ClusterTable, ClusterColumn),
	)
}
