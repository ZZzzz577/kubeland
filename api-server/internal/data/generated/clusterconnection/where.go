// Code generated by ent, DO NOT EDIT.

package clusterconnection

import (
	"api-server/internal/data/generated/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldDeleteAt, v))
}

// ClusterID applies equality check predicate on the "cluster_id" field. It's identical to ClusterIDEQ.
func ClusterID(v uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldClusterID, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldAddress, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldType, v))
}

// Ca applies equality check predicate on the "ca" field. It's identical to CaEQ.
func Ca(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldCa, v))
}

// Cert applies equality check predicate on the "cert" field. It's identical to CertEQ.
func Cert(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldCert, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldKey, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldDeleteAt, v))
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldDeleteAt, v))
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldDeleteAt, vs...))
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldDeleteAt, vs...))
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldDeleteAt, v))
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldDeleteAt, v))
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldDeleteAt, v))
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v time.Time) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldDeleteAt, v))
}

// DeleteAtIsNil applies the IsNil predicate on the "delete_at" field.
func DeleteAtIsNil() predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIsNull(FieldDeleteAt))
}

// DeleteAtNotNil applies the NotNil predicate on the "delete_at" field.
func DeleteAtNotNil() predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotNull(FieldDeleteAt))
}

// ClusterIDEQ applies the EQ predicate on the "cluster_id" field.
func ClusterIDEQ(v uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldClusterID, v))
}

// ClusterIDNEQ applies the NEQ predicate on the "cluster_id" field.
func ClusterIDNEQ(v uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldClusterID, v))
}

// ClusterIDIn applies the In predicate on the "cluster_id" field.
func ClusterIDIn(vs ...uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldClusterID, vs...))
}

// ClusterIDNotIn applies the NotIn predicate on the "cluster_id" field.
func ClusterIDNotIn(vs ...uint64) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldClusterID, vs...))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContainsFold(FieldAddress, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldType, v))
}

// CaEQ applies the EQ predicate on the "ca" field.
func CaEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldCa, v))
}

// CaNEQ applies the NEQ predicate on the "ca" field.
func CaNEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldCa, v))
}

// CaIn applies the In predicate on the "ca" field.
func CaIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldCa, vs...))
}

// CaNotIn applies the NotIn predicate on the "ca" field.
func CaNotIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldCa, vs...))
}

// CaGT applies the GT predicate on the "ca" field.
func CaGT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldCa, v))
}

// CaGTE applies the GTE predicate on the "ca" field.
func CaGTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldCa, v))
}

// CaLT applies the LT predicate on the "ca" field.
func CaLT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldCa, v))
}

// CaLTE applies the LTE predicate on the "ca" field.
func CaLTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldCa, v))
}

// CaContains applies the Contains predicate on the "ca" field.
func CaContains(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContains(FieldCa, v))
}

// CaHasPrefix applies the HasPrefix predicate on the "ca" field.
func CaHasPrefix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasPrefix(FieldCa, v))
}

// CaHasSuffix applies the HasSuffix predicate on the "ca" field.
func CaHasSuffix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasSuffix(FieldCa, v))
}

// CaEqualFold applies the EqualFold predicate on the "ca" field.
func CaEqualFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEqualFold(FieldCa, v))
}

// CaContainsFold applies the ContainsFold predicate on the "ca" field.
func CaContainsFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContainsFold(FieldCa, v))
}

// CertEQ applies the EQ predicate on the "cert" field.
func CertEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldCert, v))
}

// CertNEQ applies the NEQ predicate on the "cert" field.
func CertNEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldCert, v))
}

// CertIn applies the In predicate on the "cert" field.
func CertIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldCert, vs...))
}

// CertNotIn applies the NotIn predicate on the "cert" field.
func CertNotIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldCert, vs...))
}

// CertGT applies the GT predicate on the "cert" field.
func CertGT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldCert, v))
}

// CertGTE applies the GTE predicate on the "cert" field.
func CertGTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldCert, v))
}

// CertLT applies the LT predicate on the "cert" field.
func CertLT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldCert, v))
}

// CertLTE applies the LTE predicate on the "cert" field.
func CertLTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldCert, v))
}

// CertContains applies the Contains predicate on the "cert" field.
func CertContains(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContains(FieldCert, v))
}

// CertHasPrefix applies the HasPrefix predicate on the "cert" field.
func CertHasPrefix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasPrefix(FieldCert, v))
}

// CertHasSuffix applies the HasSuffix predicate on the "cert" field.
func CertHasSuffix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasSuffix(FieldCert, v))
}

// CertEqualFold applies the EqualFold predicate on the "cert" field.
func CertEqualFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEqualFold(FieldCert, v))
}

// CertContainsFold applies the ContainsFold predicate on the "cert" field.
func CertContainsFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContainsFold(FieldCert, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasSuffix(FieldKey, v))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContainsFold(FieldKey, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.FieldContainsFold(FieldToken, v))
}

// HasCluster applies the HasEdge predicate on the "cluster" edge.
func HasCluster() predicate.ClusterConnection {
	return predicate.ClusterConnection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ClusterTable, ClusterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClusterWith applies the HasEdge predicate on the "cluster" edge with a given conditions (other predicates).
func HasClusterWith(preds ...predicate.Cluster) predicate.ClusterConnection {
	return predicate.ClusterConnection(func(s *sql.Selector) {
		step := newClusterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ClusterConnection) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ClusterConnection) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClusterConnection) predicate.ClusterConnection {
	return predicate.ClusterConnection(sql.NotPredicates(p))
}
