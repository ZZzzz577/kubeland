// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"api-server/internal/biz"
	"api-server/internal/conf"
	"api-server/internal/data"
	"api-server/internal/server"
	"api-server/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	clusterBiz := biz.NewClusterBiz(dataData)
	clusterService := service.NewClusterService(clusterBiz)
	applicationBiz := biz.NewApplicationBiz(dataData)
	applicationService := service.NewApplicationService(applicationBiz)
	clusterManagers, cleanup2, err := biz.NewClusterManagers(dataData)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	buildSettingsBiz := biz.NewBuildSettingsBiz(clusterManagers, dataData)
	buildSettingsService := service.NewBuildSettingsService(buildSettingsBiz)
	buildTaskBiz := biz.NewBuildTaskBiz(clusterManagers, dataData)
	buildTaskService := service.NewBuildTaskService(buildTaskBiz)
	gitBiz := biz.NewGitBiz(clusterManagers, dataData)
	gitService := service.NewGitService(gitBiz)
	imageBiz := biz.NewImageBiz(dataData)
	imageService := service.NewImageService(imageBiz)
	v := service.NewServices(clusterService, applicationService, buildSettingsService, buildTaskService, gitService, imageService)
	grpcServer := server.NewGRPCServer(bootstrap)
	httpServer := server.NewHTTPServer(bootstrap, buildTaskBiz)
	app := newApp(logger, v, grpcServer, httpServer)
	return app, func() {
		cleanup2()
		cleanup()
	}, nil
}
