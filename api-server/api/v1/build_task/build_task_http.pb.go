// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/build_task/build_task.proto

package task

import (
	application "api-server/api/v1/application"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBuildTaskServiceCreate = "/api.v1.build.task.BuildTaskService/Create"
const OperationBuildTaskServiceList = "/api.v1.build.task.BuildTaskService/List"

type BuildTaskServiceHTTPServer interface {
	Create(context.Context, *CreateBuildTaskRequest) (*emptypb.Empty, error)
	List(context.Context, *application.IdentityRequest) (*ListBuildTaskResponse, error)
}

func RegisterBuildTaskServiceHTTPServer(s *http.Server, srv BuildTaskServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/app/{appName}/build/task", _BuildTaskService_Create0_HTTP_Handler(srv))
	r.GET("/api/v1/app/{name}/build/task", _BuildTaskService_List0_HTTP_Handler(srv))
}

func _BuildTaskService_Create0_HTTP_Handler(srv BuildTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBuildTaskRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBuildTaskServiceCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*CreateBuildTaskRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _BuildTaskService_List0_HTTP_Handler(srv BuildTaskServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in application.IdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBuildTaskServiceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.List(ctx, req.(*application.IdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBuildTaskResponse)
		return ctx.Result(200, reply)
	}
}

type BuildTaskServiceHTTPClient interface {
	Create(ctx context.Context, req *CreateBuildTaskRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	List(ctx context.Context, req *application.IdentityRequest, opts ...http.CallOption) (rsp *ListBuildTaskResponse, err error)
}

type BuildTaskServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBuildTaskServiceHTTPClient(client *http.Client) BuildTaskServiceHTTPClient {
	return &BuildTaskServiceHTTPClientImpl{client}
}

func (c *BuildTaskServiceHTTPClientImpl) Create(ctx context.Context, in *CreateBuildTaskRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/app/{appName}/build/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBuildTaskServiceCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BuildTaskServiceHTTPClientImpl) List(ctx context.Context, in *application.IdentityRequest, opts ...http.CallOption) (*ListBuildTaskResponse, error) {
	var out ListBuildTaskResponse
	pattern := "/api/v1/app/{name}/build/task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBuildTaskServiceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
