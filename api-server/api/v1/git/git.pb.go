// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: v1/git/git.proto

package git

import (
	application "api-server/api/v1/application"
	common "api-server/api/v1/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GitSettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitSettings) Reset() {
	*x = GitSettings{}
	mi := &file_v1_git_git_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitSettings) ProtoMessage() {}

func (x *GitSettings) ProtoReflect() protoreflect.Message {
	mi := &file_v1_git_git_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitSettings.ProtoReflect.Descriptor instead.
func (*GitSettings) Descriptor() ([]byte, []int) {
	return file_v1_git_git_proto_rawDescGZIP(), []int{0}
}

func (x *GitSettings) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitSettings) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ApplyGitSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GitSettings   *GitSettings           `protobuf:"bytes,2,opt,name=git_settings,json=gitSettings,proto3" json:"git_settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyGitSettingsRequest) Reset() {
	*x = ApplyGitSettingsRequest{}
	mi := &file_v1_git_git_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyGitSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyGitSettingsRequest) ProtoMessage() {}

func (x *ApplyGitSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_git_git_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyGitSettingsRequest.ProtoReflect.Descriptor instead.
func (*ApplyGitSettingsRequest) Descriptor() ([]byte, []int) {
	return file_v1_git_git_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyGitSettingsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplyGitSettingsRequest) GetGitSettings() *GitSettings {
	if x != nil {
		return x.GitSettings
	}
	return nil
}

type ListBranchesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []string               `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBranchesResponse) Reset() {
	*x = ListBranchesResponse{}
	mi := &file_v1_git_git_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesResponse) ProtoMessage() {}

func (x *ListBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_git_git_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesResponse.ProtoReflect.Descriptor instead.
func (*ListBranchesResponse) Descriptor() ([]byte, []int) {
	return file_v1_git_git_proto_rawDescGZIP(), []int{2}
}

func (x *ListBranchesResponse) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListCommitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BranchName    string                 `protobuf:"bytes,2,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	Page          *common.Page           `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommitsRequest) Reset() {
	*x = ListCommitsRequest{}
	mi := &file_v1_git_git_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsRequest) ProtoMessage() {}

func (x *ListCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_git_git_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsRequest.ProtoReflect.Descriptor instead.
func (*ListCommitsRequest) Descriptor() ([]byte, []int) {
	return file_v1_git_git_proto_rawDescGZIP(), []int{3}
}

func (x *ListCommitsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCommitsRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ListCommitsRequest) GetPage() *common.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListCommitsResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Pagination    *common.Pagination            `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Items         []*ListCommitsResponse_Commit `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommitsResponse) Reset() {
	*x = ListCommitsResponse{}
	mi := &file_v1_git_git_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsResponse) ProtoMessage() {}

func (x *ListCommitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_git_git_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsResponse.ProtoReflect.Descriptor instead.
func (*ListCommitsResponse) Descriptor() ([]byte, []int) {
	return file_v1_git_git_proto_rawDescGZIP(), []int{4}
}

func (x *ListCommitsResponse) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCommitsResponse) GetItems() []*ListCommitsResponse_Commit {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListCommitsResponse_Commit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sha           string                 `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommitsResponse_Commit) Reset() {
	*x = ListCommitsResponse_Commit{}
	mi := &file_v1_git_git_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommitsResponse_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommitsResponse_Commit) ProtoMessage() {}

func (x *ListCommitsResponse_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_v1_git_git_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommitsResponse_Commit.ProtoReflect.Descriptor instead.
func (*ListCommitsResponse_Commit) Descriptor() ([]byte, []int) {
	return file_v1_git_git_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListCommitsResponse_Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *ListCommitsResponse_Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCommitsResponse_Commit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_v1_git_git_proto protoreflect.FileDescriptor

const file_v1_git_git_proto_rawDesc = "" +
	"\n" +
	"\x10v1/git/git.proto\x12\n" +
	"api.v1.git\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a v1/application/application.proto\x1a\x14v1/common/page.proto\";\n" +
	"\vGitSettings\x12\x16\n" +
	"\x03url\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x03url\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\"u\n" +
	"\x17ApplyGitSettingsRequest\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x04name\x12@\n" +
	"\fgit_settings\x18\x02 \x01(\v2\x17.api.v1.git.GitSettingsB\x04\xe2A\x01\x02R\vgitSettings\",\n" +
	"\x14ListBranchesResponse\x12\x14\n" +
	"\x05items\x18\x01 \x03(\tR\x05items\"~\n" +
	"\x12ListCommitsRequest\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x04name\x12%\n" +
	"\vbranch_name\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\n" +
	"branchName\x12'\n" +
	"\x04page\x18\x03 \x01(\v2\x13.api.v1.common.PageR\x04page\"\xff\x01\n" +
	"\x13ListCommitsResponse\x129\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2\x19.api.v1.common.PaginationR\n" +
	"pagination\x12<\n" +
	"\x05items\x18\x02 \x03(\v2&.api.v1.git.ListCommitsResponse.CommitR\x05items\x1ao\n" +
	"\x06Commit\x12\x10\n" +
	"\x03sha\x18\x01 \x01(\tR\x03sha\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt2\x86\x04\n" +
	"\n" +
	"GitService\x12}\n" +
	"\x10ApplyGitSettings\x12#.api.v1.git.ApplyGitSettingsRequest\x1a\x16.google.protobuf.Empty\",\x82\xd3\xe4\x93\x02&:\fgit_settings\x1a\x16/api/v1/app/{name}/git\x12n\n" +
	"\x0eGetGitSettings\x12#.api.v1.application.IdentityRequest\x1a\x17.api.v1.git.GitSettings\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/api/v1/app/{name}/git\x12|\n" +
	"\fListBranches\x12#.api.v1.application.IdentityRequest\x1a .api.v1.git.ListBranchesResponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/api/v1/app/{name}/git/branch\x12\x8a\x01\n" +
	"\vListCommits\x12\x1e.api.v1.git.ListCommitsRequest\x1a\x1f.api.v1.git.ListCommitsResponse\":\x82\xd3\xe4\x93\x024\x122/api/v1/app/{name}/git/branch/{branch_name}/commitB\x1bZ\x19api-server/api/v1/git;gitb\x06proto3"

var (
	file_v1_git_git_proto_rawDescOnce sync.Once
	file_v1_git_git_proto_rawDescData []byte
)

func file_v1_git_git_proto_rawDescGZIP() []byte {
	file_v1_git_git_proto_rawDescOnce.Do(func() {
		file_v1_git_git_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_git_git_proto_rawDesc), len(file_v1_git_git_proto_rawDesc)))
	})
	return file_v1_git_git_proto_rawDescData
}

var file_v1_git_git_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_git_git_proto_goTypes = []any{
	(*GitSettings)(nil),                 // 0: api.v1.git.GitSettings
	(*ApplyGitSettingsRequest)(nil),     // 1: api.v1.git.ApplyGitSettingsRequest
	(*ListBranchesResponse)(nil),        // 2: api.v1.git.ListBranchesResponse
	(*ListCommitsRequest)(nil),          // 3: api.v1.git.ListCommitsRequest
	(*ListCommitsResponse)(nil),         // 4: api.v1.git.ListCommitsResponse
	(*ListCommitsResponse_Commit)(nil),  // 5: api.v1.git.ListCommitsResponse.Commit
	(*common.Page)(nil),                 // 6: api.v1.common.Page
	(*common.Pagination)(nil),           // 7: api.v1.common.Pagination
	(*timestamppb.Timestamp)(nil),       // 8: google.protobuf.Timestamp
	(*application.IdentityRequest)(nil), // 9: api.v1.application.IdentityRequest
	(*emptypb.Empty)(nil),               // 10: google.protobuf.Empty
}
var file_v1_git_git_proto_depIdxs = []int32{
	0,  // 0: api.v1.git.ApplyGitSettingsRequest.git_settings:type_name -> api.v1.git.GitSettings
	6,  // 1: api.v1.git.ListCommitsRequest.page:type_name -> api.v1.common.Page
	7,  // 2: api.v1.git.ListCommitsResponse.pagination:type_name -> api.v1.common.Pagination
	5,  // 3: api.v1.git.ListCommitsResponse.items:type_name -> api.v1.git.ListCommitsResponse.Commit
	8,  // 4: api.v1.git.ListCommitsResponse.Commit.created_at:type_name -> google.protobuf.Timestamp
	1,  // 5: api.v1.git.GitService.ApplyGitSettings:input_type -> api.v1.git.ApplyGitSettingsRequest
	9,  // 6: api.v1.git.GitService.GetGitSettings:input_type -> api.v1.application.IdentityRequest
	9,  // 7: api.v1.git.GitService.ListBranches:input_type -> api.v1.application.IdentityRequest
	3,  // 8: api.v1.git.GitService.ListCommits:input_type -> api.v1.git.ListCommitsRequest
	10, // 9: api.v1.git.GitService.ApplyGitSettings:output_type -> google.protobuf.Empty
	0,  // 10: api.v1.git.GitService.GetGitSettings:output_type -> api.v1.git.GitSettings
	2,  // 11: api.v1.git.GitService.ListBranches:output_type -> api.v1.git.ListBranchesResponse
	4,  // 12: api.v1.git.GitService.ListCommits:output_type -> api.v1.git.ListCommitsResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_v1_git_git_proto_init() }
func file_v1_git_git_proto_init() {
	if File_v1_git_git_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_git_git_proto_rawDesc), len(file_v1_git_git_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_git_git_proto_goTypes,
		DependencyIndexes: file_v1_git_git_proto_depIdxs,
		MessageInfos:      file_v1_git_git_proto_msgTypes,
	}.Build()
	File_v1_git_git_proto = out.File
	file_v1_git_git_proto_goTypes = nil
	file_v1_git_git_proto_depIdxs = nil
}
