// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/git/git.proto

package git

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdentityRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityRequestMultiError, or nil if none found.
func (m *IdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := IdentityRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdentityRequestMultiError(errors)
	}

	return nil
}

// IdentityRequestMultiError is an error wrapping multiple validation errors
// returned by IdentityRequest.ValidateAll() if the designated constraints
// aren't met.
type IdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityRequestMultiError) AllErrors() []error { return m }

// IdentityRequestValidationError is the validation error returned by
// IdentityRequest.Validate if the designated constraints aren't met.
type IdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityRequestValidationError) ErrorName() string { return "IdentityRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityRequestValidationError{}

// Validate checks the field values on GitRepo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitRepo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitRepo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GitRepoMultiError, or nil if none found.
func (m *GitRepo) ValidateAll() error {
	return m.validate(true)
}

func (m *GitRepo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := GitRepoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Url

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitRepoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitRepoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitRepoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitRepoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitRepoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitRepoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GitRepoMultiError(errors)
	}

	return nil
}

// GitRepoMultiError is an error wrapping multiple validation errors returned
// by GitRepo.ValidateAll() if the designated constraints aren't met.
type GitRepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitRepoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitRepoMultiError) AllErrors() []error { return m }

// GitRepoValidationError is the validation error returned by GitRepo.Validate
// if the designated constraints aren't met.
type GitRepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitRepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitRepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitRepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitRepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitRepoValidationError) ErrorName() string { return "GitRepoValidationError" }

// Error satisfies the builtin error interface
func (e GitRepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitRepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitRepoValidationError{}

// Validate checks the field values on ListGitReposRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGitReposRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGitReposRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGitReposRequestMultiError, or nil if none found.
func (m *ListGitReposRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGitReposRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGitReposRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGitReposRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGitReposRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListGitReposRequestMultiError(errors)
	}

	return nil
}

// ListGitReposRequestMultiError is an error wrapping multiple validation
// errors returned by ListGitReposRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGitReposRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGitReposRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGitReposRequestMultiError) AllErrors() []error { return m }

// ListGitReposRequestValidationError is the validation error returned by
// ListGitReposRequest.Validate if the designated constraints aren't met.
type ListGitReposRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGitReposRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGitReposRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGitReposRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGitReposRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGitReposRequestValidationError) ErrorName() string {
	return "ListGitReposRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGitReposRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGitReposRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGitReposRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGitReposRequestValidationError{}

// Validate checks the field values on ListGitReposResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGitReposResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGitReposResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGitReposResponseMultiError, or nil if none found.
func (m *ListGitReposResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGitReposResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGitReposResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGitReposResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGitReposResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGitReposResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGitReposResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGitReposResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGitReposResponseMultiError(errors)
	}

	return nil
}

// ListGitReposResponseMultiError is an error wrapping multiple validation
// errors returned by ListGitReposResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGitReposResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGitReposResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGitReposResponseMultiError) AllErrors() []error { return m }

// ListGitReposResponseValidationError is the validation error returned by
// ListGitReposResponse.Validate if the designated constraints aren't met.
type ListGitReposResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGitReposResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGitReposResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGitReposResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGitReposResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGitReposResponseValidationError) ErrorName() string {
	return "ListGitReposResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGitReposResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGitReposResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGitReposResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGitReposResponseValidationError{}

// Validate checks the field values on GitSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GitSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GitSettingsMultiError, or
// nil if none found.
func (m *GitSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *GitSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Token

	if len(errors) > 0 {
		return GitSettingsMultiError(errors)
	}

	return nil
}

// GitSettingsMultiError is an error wrapping multiple validation errors
// returned by GitSettings.ValidateAll() if the designated constraints aren't met.
type GitSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitSettingsMultiError) AllErrors() []error { return m }

// GitSettingsValidationError is the validation error returned by
// GitSettings.Validate if the designated constraints aren't met.
type GitSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitSettingsValidationError) ErrorName() string { return "GitSettingsValidationError" }

// Error satisfies the builtin error interface
func (e GitSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitSettingsValidationError{}

// Validate checks the field values on ApplyGitSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyGitSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyGitSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyGitSettingsRequestMultiError, or nil if none found.
func (m *ApplyGitSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyGitSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetGitSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyGitSettingsRequestValidationError{
					field:  "GitSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyGitSettingsRequestValidationError{
					field:  "GitSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGitSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyGitSettingsRequestValidationError{
				field:  "GitSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplyGitSettingsRequestMultiError(errors)
	}

	return nil
}

// ApplyGitSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by ApplyGitSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type ApplyGitSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyGitSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyGitSettingsRequestMultiError) AllErrors() []error { return m }

// ApplyGitSettingsRequestValidationError is the validation error returned by
// ApplyGitSettingsRequest.Validate if the designated constraints aren't met.
type ApplyGitSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyGitSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyGitSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyGitSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyGitSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyGitSettingsRequestValidationError) ErrorName() string {
	return "ApplyGitSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyGitSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyGitSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyGitSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyGitSettingsRequestValidationError{}

// Validate checks the field values on ListBranchesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBranchesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBranchesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBranchesResponseMultiError, or nil if none found.
func (m *ListBranchesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBranchesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBranchesResponseMultiError(errors)
	}

	return nil
}

// ListBranchesResponseMultiError is an error wrapping multiple validation
// errors returned by ListBranchesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBranchesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBranchesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBranchesResponseMultiError) AllErrors() []error { return m }

// ListBranchesResponseValidationError is the validation error returned by
// ListBranchesResponse.Validate if the designated constraints aren't met.
type ListBranchesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBranchesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBranchesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBranchesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBranchesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBranchesResponseValidationError) ErrorName() string {
	return "ListBranchesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBranchesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBranchesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBranchesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBranchesResponseValidationError{}

// Validate checks the field values on ListCommitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommitsRequestMultiError, or nil if none found.
func (m *ListCommitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for BranchName

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommitsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommitsRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommitsRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCommitsRequestMultiError(errors)
	}

	return nil
}

// ListCommitsRequestMultiError is an error wrapping multiple validation errors
// returned by ListCommitsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCommitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommitsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommitsRequestMultiError) AllErrors() []error { return m }

// ListCommitsRequestValidationError is the validation error returned by
// ListCommitsRequest.Validate if the designated constraints aren't met.
type ListCommitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommitsRequestValidationError) ErrorName() string {
	return "ListCommitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommitsRequestValidationError{}

// Validate checks the field values on ListCommitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommitsResponseMultiError, or nil if none found.
func (m *ListCommitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommitsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommitsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommitsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommitsResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommitsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommitsResponseMultiError(errors)
	}

	return nil
}

// ListCommitsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCommitsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCommitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommitsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommitsResponseMultiError) AllErrors() []error { return m }

// ListCommitsResponseValidationError is the validation error returned by
// ListCommitsResponse.Validate if the designated constraints aren't met.
type ListCommitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommitsResponseValidationError) ErrorName() string {
	return "ListCommitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommitsResponseValidationError{}

// Validate checks the field values on ListCommitsResponse_Commit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommitsResponse_Commit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommitsResponse_Commit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommitsResponse_CommitMultiError, or nil if none found.
func (m *ListCommitsResponse_Commit) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommitsResponse_Commit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCommitsResponse_CommitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCommitsResponse_CommitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCommitsResponse_CommitValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCommitsResponse_CommitMultiError(errors)
	}

	return nil
}

// ListCommitsResponse_CommitMultiError is an error wrapping multiple
// validation errors returned by ListCommitsResponse_Commit.ValidateAll() if
// the designated constraints aren't met.
type ListCommitsResponse_CommitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommitsResponse_CommitMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommitsResponse_CommitMultiError) AllErrors() []error { return m }

// ListCommitsResponse_CommitValidationError is the validation error returned
// by ListCommitsResponse_Commit.Validate if the designated constraints aren't met.
type ListCommitsResponse_CommitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommitsResponse_CommitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommitsResponse_CommitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommitsResponse_CommitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommitsResponse_CommitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommitsResponse_CommitValidationError) ErrorName() string {
	return "ListCommitsResponse_CommitValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommitsResponse_CommitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommitsResponse_Commit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommitsResponse_CommitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommitsResponse_CommitValidationError{}
