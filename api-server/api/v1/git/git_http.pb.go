// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/git/git.proto

package git

import (
	application "api-server/api/v1/application"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGitServiceApplyGitSettings = "/api.v1.git.GitService/ApplyGitSettings"
const OperationGitServiceGetGitSettings = "/api.v1.git.GitService/GetGitSettings"
const OperationGitServiceListBranches = "/api.v1.git.GitService/ListBranches"
const OperationGitServiceListCommits = "/api.v1.git.GitService/ListCommits"

type GitServiceHTTPServer interface {
	ApplyGitSettings(context.Context, *ApplyGitSettingsRequest) (*emptypb.Empty, error)
	GetGitSettings(context.Context, *application.IdentityRequest) (*GitSettings, error)
	ListBranches(context.Context, *application.IdentityRequest) (*ListBranchesResponse, error)
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error)
}

func RegisterGitServiceHTTPServer(s *http.Server, srv GitServiceHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/app/{name}/git", _GitService_ApplyGitSettings0_HTTP_Handler(srv))
	r.GET("/api/v1/app/{name}/git", _GitService_GetGitSettings0_HTTP_Handler(srv))
	r.GET("/api/v1/app/{name}/git/branch", _GitService_ListBranches0_HTTP_Handler(srv))
	r.GET("/api/v1/app/{name}/git/branch/{branch_name}/commit", _GitService_ListCommits0_HTTP_Handler(srv))
}

func _GitService_ApplyGitSettings0_HTTP_Handler(srv GitServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApplyGitSettingsRequest
		if err := ctx.Bind(&in.GitSettings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitServiceApplyGitSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApplyGitSettings(ctx, req.(*ApplyGitSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _GitService_GetGitSettings0_HTTP_Handler(srv GitServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in application.IdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitServiceGetGitSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGitSettings(ctx, req.(*application.IdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GitSettings)
		return ctx.Result(200, reply)
	}
}

func _GitService_ListBranches0_HTTP_Handler(srv GitServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in application.IdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitServiceListBranches)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBranches(ctx, req.(*application.IdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBranchesResponse)
		return ctx.Result(200, reply)
	}
}

func _GitService_ListCommits0_HTTP_Handler(srv GitServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCommitsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGitServiceListCommits)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCommits(ctx, req.(*ListCommitsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommitsResponse)
		return ctx.Result(200, reply)
	}
}

type GitServiceHTTPClient interface {
	ApplyGitSettings(ctx context.Context, req *ApplyGitSettingsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetGitSettings(ctx context.Context, req *application.IdentityRequest, opts ...http.CallOption) (rsp *GitSettings, err error)
	ListBranches(ctx context.Context, req *application.IdentityRequest, opts ...http.CallOption) (rsp *ListBranchesResponse, err error)
	ListCommits(ctx context.Context, req *ListCommitsRequest, opts ...http.CallOption) (rsp *ListCommitsResponse, err error)
}

type GitServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewGitServiceHTTPClient(client *http.Client) GitServiceHTTPClient {
	return &GitServiceHTTPClientImpl{client}
}

func (c *GitServiceHTTPClientImpl) ApplyGitSettings(ctx context.Context, in *ApplyGitSettingsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/app/{name}/git"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGitServiceApplyGitSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.GitSettings, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GitServiceHTTPClientImpl) GetGitSettings(ctx context.Context, in *application.IdentityRequest, opts ...http.CallOption) (*GitSettings, error) {
	var out GitSettings
	pattern := "/api/v1/app/{name}/git"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGitServiceGetGitSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GitServiceHTTPClientImpl) ListBranches(ctx context.Context, in *application.IdentityRequest, opts ...http.CallOption) (*ListBranchesResponse, error) {
	var out ListBranchesResponse
	pattern := "/api/v1/app/{name}/git/branch"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGitServiceListBranches))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GitServiceHTTPClientImpl) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...http.CallOption) (*ListCommitsResponse, error) {
	var out ListCommitsResponse
	pattern := "/api/v1/app/{name}/git/branch/{branch_name}/commit"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGitServiceListCommits))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
