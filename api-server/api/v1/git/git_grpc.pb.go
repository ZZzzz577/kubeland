// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/git/git.proto

package git

import (
	application "api-server/api/v1/application"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GitService_ApplyGitSettings_FullMethodName = "/api.v1.git.GitService/ApplyGitSettings"
	GitService_GetGitSettings_FullMethodName   = "/api.v1.git.GitService/GetGitSettings"
	GitService_ListBranches_FullMethodName     = "/api.v1.git.GitService/ListBranches"
	GitService_ListCommits_FullMethodName      = "/api.v1.git.GitService/ListCommits"
)

// GitServiceClient is the client API for GitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitServiceClient interface {
	ApplyGitSettings(ctx context.Context, in *ApplyGitSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGitSettings(ctx context.Context, in *application.IdentityRequest, opts ...grpc.CallOption) (*GitSettings, error)
	ListBranches(ctx context.Context, in *application.IdentityRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error)
}

type gitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitServiceClient(cc grpc.ClientConnInterface) GitServiceClient {
	return &gitServiceClient{cc}
}

func (c *gitServiceClient) ApplyGitSettings(ctx context.Context, in *ApplyGitSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GitService_ApplyGitSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetGitSettings(ctx context.Context, in *application.IdentityRequest, opts ...grpc.CallOption) (*GitSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GitSettings)
	err := c.cc.Invoke(ctx, GitService_GetGitSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ListBranches(ctx context.Context, in *application.IdentityRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBranchesResponse)
	err := c.cc.Invoke(ctx, GitService_ListBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ListCommits(ctx context.Context, in *ListCommitsRequest, opts ...grpc.CallOption) (*ListCommitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommitsResponse)
	err := c.cc.Invoke(ctx, GitService_ListCommits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitServiceServer is the server API for GitService service.
// All implementations must embed UnimplementedGitServiceServer
// for forward compatibility.
type GitServiceServer interface {
	ApplyGitSettings(context.Context, *ApplyGitSettingsRequest) (*emptypb.Empty, error)
	GetGitSettings(context.Context, *application.IdentityRequest) (*GitSettings, error)
	ListBranches(context.Context, *application.IdentityRequest) (*ListBranchesResponse, error)
	ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error)
	mustEmbedUnimplementedGitServiceServer()
}

// UnimplementedGitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGitServiceServer struct{}

func (UnimplementedGitServiceServer) ApplyGitSettings(context.Context, *ApplyGitSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyGitSettings not implemented")
}
func (UnimplementedGitServiceServer) GetGitSettings(context.Context, *application.IdentityRequest) (*GitSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitSettings not implemented")
}
func (UnimplementedGitServiceServer) ListBranches(context.Context, *application.IdentityRequest) (*ListBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (UnimplementedGitServiceServer) ListCommits(context.Context, *ListCommitsRequest) (*ListCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommits not implemented")
}
func (UnimplementedGitServiceServer) mustEmbedUnimplementedGitServiceServer() {}
func (UnimplementedGitServiceServer) testEmbeddedByValue()                    {}

// UnsafeGitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitServiceServer will
// result in compilation errors.
type UnsafeGitServiceServer interface {
	mustEmbedUnimplementedGitServiceServer()
}

func RegisterGitServiceServer(s grpc.ServiceRegistrar, srv GitServiceServer) {
	// If the following call pancis, it indicates UnimplementedGitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GitService_ServiceDesc, srv)
}

func _GitService_ApplyGitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyGitSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ApplyGitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_ApplyGitSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ApplyGitSettings(ctx, req.(*ApplyGitSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetGitSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(application.IdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetGitSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_GetGitSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetGitSettings(ctx, req.(*application.IdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(application.IdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_ListBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ListBranches(ctx, req.(*application.IdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ListCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ListCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitService_ListCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ListCommits(ctx, req.(*ListCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GitService_ServiceDesc is the grpc.ServiceDesc for GitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.git.GitService",
	HandlerType: (*GitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyGitSettings",
			Handler:    _GitService_ApplyGitSettings_Handler,
		},
		{
			MethodName: "GetGitSettings",
			Handler:    _GitService_GetGitSettings_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _GitService_ListBranches_Handler,
		},
		{
			MethodName: "ListCommits",
			Handler:    _GitService_ListCommits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/git/git.proto",
}
