// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/build_settings/build_settings.proto

package settings

import (
	application "api-server/api/v1/application"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBuildSettingsServiceApplyBuildSettings = "/api.v1.build.settings.BuildSettingsService/ApplyBuildSettings"
const OperationBuildSettingsServiceGetBuildSettings = "/api.v1.build.settings.BuildSettingsService/GetBuildSettings"

type BuildSettingsServiceHTTPServer interface {
	ApplyBuildSettings(context.Context, *ApplyBuildSettingsRequest) (*emptypb.Empty, error)
	GetBuildSettings(context.Context, *application.IdentityRequest) (*BuildSettings, error)
}

func RegisterBuildSettingsServiceHTTPServer(s *http.Server, srv BuildSettingsServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/app/{name}/build/settings", _BuildSettingsService_GetBuildSettings0_HTTP_Handler(srv))
	r.POST("/api/v1/app/{name}/build/settings", _BuildSettingsService_ApplyBuildSettings0_HTTP_Handler(srv))
}

func _BuildSettingsService_GetBuildSettings0_HTTP_Handler(srv BuildSettingsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in application.IdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBuildSettingsServiceGetBuildSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBuildSettings(ctx, req.(*application.IdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BuildSettings)
		return ctx.Result(200, reply)
	}
}

func _BuildSettingsService_ApplyBuildSettings0_HTTP_Handler(srv BuildSettingsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ApplyBuildSettingsRequest
		if err := ctx.Bind(&in.BuildSettings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBuildSettingsServiceApplyBuildSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApplyBuildSettings(ctx, req.(*ApplyBuildSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type BuildSettingsServiceHTTPClient interface {
	ApplyBuildSettings(ctx context.Context, req *ApplyBuildSettingsRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetBuildSettings(ctx context.Context, req *application.IdentityRequest, opts ...http.CallOption) (rsp *BuildSettings, err error)
}

type BuildSettingsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBuildSettingsServiceHTTPClient(client *http.Client) BuildSettingsServiceHTTPClient {
	return &BuildSettingsServiceHTTPClientImpl{client}
}

func (c *BuildSettingsServiceHTTPClientImpl) ApplyBuildSettings(ctx context.Context, in *ApplyBuildSettingsRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/app/{name}/build/settings"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBuildSettingsServiceApplyBuildSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.BuildSettings, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *BuildSettingsServiceHTTPClientImpl) GetBuildSettings(ctx context.Context, in *application.IdentityRequest, opts ...http.CallOption) (*BuildSettings, error) {
	var out BuildSettings
	pattern := "/api/v1/app/{name}/build/settings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBuildSettingsServiceGetBuildSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
