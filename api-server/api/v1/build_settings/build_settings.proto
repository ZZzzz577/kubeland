syntax = "proto3";

package api.v1.build.settings;

import "v1/application/application.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

option go_package = "api-server/api/v1/build/settings;settings";

service BuildSettingsService {

  rpc GetBuildSettings(application.IdentityRequest) returns (BuildSettings) {
    option (google.api.http) = {
      get: "/api/v1/app/{name}/build/settings";
    };
  }

  rpc ApplyBuildSettings(ApplyBuildSettingsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/app/{name}/build/settings";
      body: "build_settings";
    };
  }

}


message BuildSettings {
  message GitSettings {
    string repo_name = 1[
      (google.api.field_behavior) = REQUIRED,
      (validate.rules).string = {min_len: 1,max_len: 64}
    ];
    string repo_path = 2[
      (google.api.field_behavior) = REQUIRED,
      (validate.rules).string = {min_len: 1,max_len: 512}
    ];
    string url = 3[
      (google.api.field_behavior) = OUTPUT_ONLY
    ];
  }

  message ImageSettings {
    string repo_name = 1[
      (google.api.field_behavior) = REQUIRED,
      (validate.rules).string = {min_len: 1,max_len: 64}
    ];
    string url = 2[
      (google.api.field_behavior) = OUTPUT_ONLY
    ];
  }

  GitSettings git = 1[
    (google.api.field_behavior) = REQUIRED
  ];

  ImageSettings image = 2[
    (google.api.field_behavior) = REQUIRED
  ];

  string dockerfile = 3[
    (google.api.field_behavior) = REQUIRED
  ];

}

message ApplyBuildSettingsRequest {
  string name = 1[
    (google.api.field_behavior) = REQUIRED
  ];
  BuildSettings build_settings = 2;
}