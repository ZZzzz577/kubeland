// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/build_settings/build_settings.proto

package settings

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BuildSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BuildSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BuildSettingsMultiError, or
// nil if none found.
func (m *BuildSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildSettingsValidationError{
					field:  "Git",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildSettingsValidationError{
					field:  "Git",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildSettingsValidationError{
				field:  "Git",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildSettingsValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildSettingsValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildSettingsValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Dockerfile

	if len(errors) > 0 {
		return BuildSettingsMultiError(errors)
	}

	return nil
}

// BuildSettingsMultiError is an error wrapping multiple validation errors
// returned by BuildSettings.ValidateAll() if the designated constraints
// aren't met.
type BuildSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildSettingsMultiError) AllErrors() []error { return m }

// BuildSettingsValidationError is the validation error returned by
// BuildSettings.Validate if the designated constraints aren't met.
type BuildSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildSettingsValidationError) ErrorName() string { return "BuildSettingsValidationError" }

// Error satisfies the builtin error interface
func (e BuildSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildSettingsValidationError{}

// Validate checks the field values on ApplyBuildSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyBuildSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyBuildSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyBuildSettingsRequestMultiError, or nil if none found.
func (m *ApplyBuildSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyBuildSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetBuildSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyBuildSettingsRequestValidationError{
					field:  "BuildSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyBuildSettingsRequestValidationError{
					field:  "BuildSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBuildSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyBuildSettingsRequestValidationError{
				field:  "BuildSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplyBuildSettingsRequestMultiError(errors)
	}

	return nil
}

// ApplyBuildSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by ApplyBuildSettingsRequest.ValidateAll() if the
// designated constraints aren't met.
type ApplyBuildSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyBuildSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyBuildSettingsRequestMultiError) AllErrors() []error { return m }

// ApplyBuildSettingsRequestValidationError is the validation error returned by
// ApplyBuildSettingsRequest.Validate if the designated constraints aren't met.
type ApplyBuildSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyBuildSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyBuildSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyBuildSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyBuildSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyBuildSettingsRequestValidationError) ErrorName() string {
	return "ApplyBuildSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyBuildSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyBuildSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyBuildSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyBuildSettingsRequestValidationError{}

// Validate checks the field values on BuildSettings_GitSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildSettings_GitSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildSettings_GitSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildSettings_GitSettingsMultiError, or nil if none found.
func (m *BuildSettings_GitSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildSettings_GitSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRepoName()); l < 1 || l > 64 {
		err := BuildSettings_GitSettingsValidationError{
			field:  "RepoName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetRepoPath()); l < 1 || l > 512 {
		err := BuildSettings_GitSettingsValidationError{
			field:  "RepoPath",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Url

	if len(errors) > 0 {
		return BuildSettings_GitSettingsMultiError(errors)
	}

	return nil
}

// BuildSettings_GitSettingsMultiError is an error wrapping multiple validation
// errors returned by BuildSettings_GitSettings.ValidateAll() if the
// designated constraints aren't met.
type BuildSettings_GitSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildSettings_GitSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildSettings_GitSettingsMultiError) AllErrors() []error { return m }

// BuildSettings_GitSettingsValidationError is the validation error returned by
// BuildSettings_GitSettings.Validate if the designated constraints aren't met.
type BuildSettings_GitSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildSettings_GitSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildSettings_GitSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildSettings_GitSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildSettings_GitSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildSettings_GitSettingsValidationError) ErrorName() string {
	return "BuildSettings_GitSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e BuildSettings_GitSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildSettings_GitSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildSettings_GitSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildSettings_GitSettingsValidationError{}

// Validate checks the field values on BuildSettings_ImageSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildSettings_ImageSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildSettings_ImageSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildSettings_ImageSettingsMultiError, or nil if none found.
func (m *BuildSettings_ImageSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildSettings_ImageSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetRepoName()); l < 1 || l > 64 {
		err := BuildSettings_ImageSettingsValidationError{
			field:  "RepoName",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Url

	if len(errors) > 0 {
		return BuildSettings_ImageSettingsMultiError(errors)
	}

	return nil
}

// BuildSettings_ImageSettingsMultiError is an error wrapping multiple
// validation errors returned by BuildSettings_ImageSettings.ValidateAll() if
// the designated constraints aren't met.
type BuildSettings_ImageSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildSettings_ImageSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildSettings_ImageSettingsMultiError) AllErrors() []error { return m }

// BuildSettings_ImageSettingsValidationError is the validation error returned
// by BuildSettings_ImageSettings.Validate if the designated constraints
// aren't met.
type BuildSettings_ImageSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildSettings_ImageSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildSettings_ImageSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildSettings_ImageSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildSettings_ImageSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildSettings_ImageSettingsValidationError) ErrorName() string {
	return "BuildSettings_ImageSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e BuildSettings_ImageSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildSettings_ImageSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildSettings_ImageSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildSettings_ImageSettingsValidationError{}
