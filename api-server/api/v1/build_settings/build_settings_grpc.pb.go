// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/build_settings/build_settings.proto

package settings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BuildSettingsService_GetBuildSettings_FullMethodName   = "/api.v1.build.settings.BuildSettingsService/GetBuildSettings"
	BuildSettingsService_ApplyBuildSettings_FullMethodName = "/api.v1.build.settings.BuildSettingsService/ApplyBuildSettings"
)

// BuildSettingsServiceClient is the client API for BuildSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildSettingsServiceClient interface {
	GetBuildSettings(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BuildSettings, error)
	ApplyBuildSettings(ctx context.Context, in *BuildSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type buildSettingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildSettingsServiceClient(cc grpc.ClientConnInterface) BuildSettingsServiceClient {
	return &buildSettingsServiceClient{cc}
}

func (c *buildSettingsServiceClient) GetBuildSettings(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*BuildSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildSettings)
	err := c.cc.Invoke(ctx, BuildSettingsService_GetBuildSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildSettingsServiceClient) ApplyBuildSettings(ctx context.Context, in *BuildSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BuildSettingsService_ApplyBuildSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildSettingsServiceServer is the server API for BuildSettingsService service.
// All implementations must embed UnimplementedBuildSettingsServiceServer
// for forward compatibility.
type BuildSettingsServiceServer interface {
	GetBuildSettings(context.Context, *IdRequest) (*BuildSettings, error)
	ApplyBuildSettings(context.Context, *BuildSettings) (*emptypb.Empty, error)
	mustEmbedUnimplementedBuildSettingsServiceServer()
}

// UnimplementedBuildSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBuildSettingsServiceServer struct{}

func (UnimplementedBuildSettingsServiceServer) GetBuildSettings(context.Context, *IdRequest) (*BuildSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildSettings not implemented")
}
func (UnimplementedBuildSettingsServiceServer) ApplyBuildSettings(context.Context, *BuildSettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyBuildSettings not implemented")
}
func (UnimplementedBuildSettingsServiceServer) mustEmbedUnimplementedBuildSettingsServiceServer() {}
func (UnimplementedBuildSettingsServiceServer) testEmbeddedByValue()                              {}

// UnsafeBuildSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildSettingsServiceServer will
// result in compilation errors.
type UnsafeBuildSettingsServiceServer interface {
	mustEmbedUnimplementedBuildSettingsServiceServer()
}

func RegisterBuildSettingsServiceServer(s grpc.ServiceRegistrar, srv BuildSettingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedBuildSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BuildSettingsService_ServiceDesc, srv)
}

func _BuildSettingsService_GetBuildSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSettingsServiceServer).GetBuildSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildSettingsService_GetBuildSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSettingsServiceServer).GetBuildSettings(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildSettingsService_ApplyBuildSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildSettingsServiceServer).ApplyBuildSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildSettingsService_ApplyBuildSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildSettingsServiceServer).ApplyBuildSettings(ctx, req.(*BuildSettings))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildSettingsService_ServiceDesc is the grpc.ServiceDesc for BuildSettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildSettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.build.settings.BuildSettingsService",
	HandlerType: (*BuildSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBuildSettings",
			Handler:    _BuildSettingsService_GetBuildSettings_Handler,
		},
		{
			MethodName: "ApplyBuildSettings",
			Handler:    _BuildSettingsService_ApplyBuildSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/build_settings/build_settings.proto",
}
