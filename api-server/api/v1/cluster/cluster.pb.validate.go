// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/cluster/cluster.proto

package cluster

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClusterMultiError, or nil if none found.
func (m *Cluster) ValidateAll() error {
	return m.validate(true)
}

func (m *Cluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) > 64 {
		err := ClusterValidationError{
			field:  "Name",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Cluster_Name_Pattern.MatchString(m.GetName()) {
		err := ClusterValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1024 {
		err := ClusterValidationError{
			field:  "Description",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) > 512 {
		err := ClusterValidationError{
			field:  "Address",
			reason: "value length must be at most 512 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetAddress()); err != nil {
		err = ClusterValidationError{
			field:  "Address",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ClusterValidationError{
			field:  "Address",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSecurity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "Security",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "Security",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClusterValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClusterValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClusterMultiError(errors)
	}

	return nil
}

// ClusterMultiError is an error wrapping multiple validation errors returned
// by Cluster.ValidateAll() if the designated constraints aren't met.
type ClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterMultiError) AllErrors() []error { return m }

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

var _Cluster_Name_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]?$")

// Validate checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClustersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersRequestMultiError, or nil if none found.
func (m *ListClustersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListClustersRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListClustersRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClustersRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListClustersRequestMultiError(errors)
	}

	return nil
}

// ListClustersRequestMultiError is an error wrapping multiple validation
// errors returned by ListClustersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListClustersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersRequestMultiError) AllErrors() []error { return m }

// ListClustersRequestValidationError is the validation error returned by
// ListClustersRequest.Validate if the designated constraints aren't met.
type ListClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersRequestValidationError) ErrorName() string {
	return "ListClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersRequestValidationError{}

// Validate checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClustersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClustersResponseMultiError, or nil if none found.
func (m *ListClustersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClustersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListClustersResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListClustersResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListClustersResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClustersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClustersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClustersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListClustersResponseMultiError(errors)
	}

	return nil
}

// ListClustersResponseMultiError is an error wrapping multiple validation
// errors returned by ListClustersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListClustersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClustersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClustersResponseMultiError) AllErrors() []error { return m }

// ListClustersResponseValidationError is the validation error returned by
// ListClustersResponse.Validate if the designated constraints aren't met.
type ListClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersResponseValidationError) ErrorName() string {
	return "ListClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersResponseValidationError{}

// Validate checks the field values on IdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRequestMultiError, or nil
// if none found.
func (m *IdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdRequestMultiError(errors)
	}

	return nil
}

// IdRequestMultiError is an error wrapping multiple validation errors returned
// by IdRequest.ValidateAll() if the designated constraints aren't met.
type IdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestMultiError) AllErrors() []error { return m }

// IdRequestValidationError is the validation error returned by
// IdRequest.Validate if the designated constraints aren't met.
type IdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestValidationError) ErrorName() string { return "IdRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestValidationError{}

// Validate checks the field values on ResolveKubeConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveKubeConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveKubeConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveKubeConfigRequestMultiError, or nil if none found.
func (m *ResolveKubeConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveKubeConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return ResolveKubeConfigRequestMultiError(errors)
	}

	return nil
}

// ResolveKubeConfigRequestMultiError is an error wrapping multiple validation
// errors returned by ResolveKubeConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type ResolveKubeConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveKubeConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveKubeConfigRequestMultiError) AllErrors() []error { return m }

// ResolveKubeConfigRequestValidationError is the validation error returned by
// ResolveKubeConfigRequest.Validate if the designated constraints aren't met.
type ResolveKubeConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveKubeConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveKubeConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveKubeConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveKubeConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveKubeConfigRequestValidationError) ErrorName() string {
	return "ResolveKubeConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveKubeConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveKubeConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveKubeConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveKubeConfigRequestValidationError{}

// Validate checks the field values on ResolveKubeConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveKubeConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveKubeConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResolveKubeConfigResponseMultiError, or nil if none found.
func (m *ResolveKubeConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveKubeConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResolveKubeConfigResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResolveKubeConfigResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResolveKubeConfigResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ResolveKubeConfigResponseMultiError(errors)
	}

	return nil
}

// ResolveKubeConfigResponseMultiError is an error wrapping multiple validation
// errors returned by ResolveKubeConfigResponse.ValidateAll() if the
// designated constraints aren't met.
type ResolveKubeConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveKubeConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveKubeConfigResponseMultiError) AllErrors() []error { return m }

// ResolveKubeConfigResponseValidationError is the validation error returned by
// ResolveKubeConfigResponse.Validate if the designated constraints aren't met.
type ResolveKubeConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveKubeConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveKubeConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveKubeConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveKubeConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveKubeConfigResponseValidationError) ErrorName() string {
	return "ResolveKubeConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveKubeConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveKubeConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveKubeConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveKubeConfigResponseValidationError{}

// Validate checks the field values on Cluster_Security with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Cluster_Security) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cluster_Security with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Cluster_SecurityMultiError, or nil if none found.
func (m *Cluster_Security) ValidateAll() error {
	return m.validate(true)
}

func (m *Cluster_Security) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Cluster_Security_Type_NotInLookup[m.GetType()]; ok {
		err := Cluster_SecurityValidationError{
			field:  "Type",
			reason: "value must not be in list [UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Ca

	// no validation rules for Cert

	// no validation rules for Key

	// no validation rules for Token

	if len(errors) > 0 {
		return Cluster_SecurityMultiError(errors)
	}

	return nil
}

// Cluster_SecurityMultiError is an error wrapping multiple validation errors
// returned by Cluster_Security.ValidateAll() if the designated constraints
// aren't met.
type Cluster_SecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Cluster_SecurityMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Cluster_SecurityMultiError) AllErrors() []error { return m }

// Cluster_SecurityValidationError is the validation error returned by
// Cluster_Security.Validate if the designated constraints aren't met.
type Cluster_SecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Cluster_SecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Cluster_SecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Cluster_SecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Cluster_SecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Cluster_SecurityValidationError) ErrorName() string { return "Cluster_SecurityValidationError" }

// Error satisfies the builtin error interface
func (e Cluster_SecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster_Security.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Cluster_SecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Cluster_SecurityValidationError{}

var _Cluster_Security_Type_NotInLookup = map[Cluster_Security_Type]struct{}{
	0: {},
}

// Validate checks the field values on ResolveKubeConfigResponse_Cluster with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ResolveKubeConfigResponse_Cluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveKubeConfigResponse_Cluster
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResolveKubeConfigResponse_ClusterMultiError, or nil if none found.
func (m *ResolveKubeConfigResponse_Cluster) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveKubeConfigResponse_Cluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetServer()); err != nil {
		err = ResolveKubeConfigResponse_ClusterValidationError{
			field:  "Server",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := ResolveKubeConfigResponse_ClusterValidationError{
			field:  "Server",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Ca

	if len(errors) > 0 {
		return ResolveKubeConfigResponse_ClusterMultiError(errors)
	}

	return nil
}

// ResolveKubeConfigResponse_ClusterMultiError is an error wrapping multiple
// validation errors returned by
// ResolveKubeConfigResponse_Cluster.ValidateAll() if the designated
// constraints aren't met.
type ResolveKubeConfigResponse_ClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveKubeConfigResponse_ClusterMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveKubeConfigResponse_ClusterMultiError) AllErrors() []error { return m }

// ResolveKubeConfigResponse_ClusterValidationError is the validation error
// returned by ResolveKubeConfigResponse_Cluster.Validate if the designated
// constraints aren't met.
type ResolveKubeConfigResponse_ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveKubeConfigResponse_ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveKubeConfigResponse_ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveKubeConfigResponse_ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveKubeConfigResponse_ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveKubeConfigResponse_ClusterValidationError) ErrorName() string {
	return "ResolveKubeConfigResponse_ClusterValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveKubeConfigResponse_ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveKubeConfigResponse_Cluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveKubeConfigResponse_ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveKubeConfigResponse_ClusterValidationError{}

// Validate checks the field values on ResolveKubeConfigResponse_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResolveKubeConfigResponse_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveKubeConfigResponse_User with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ResolveKubeConfigResponse_UserMultiError, or nil if none found.
func (m *ResolveKubeConfigResponse_User) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveKubeConfigResponse_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cert

	// no validation rules for Key

	if len(errors) > 0 {
		return ResolveKubeConfigResponse_UserMultiError(errors)
	}

	return nil
}

// ResolveKubeConfigResponse_UserMultiError is an error wrapping multiple
// validation errors returned by ResolveKubeConfigResponse_User.ValidateAll()
// if the designated constraints aren't met.
type ResolveKubeConfigResponse_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveKubeConfigResponse_UserMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveKubeConfigResponse_UserMultiError) AllErrors() []error { return m }

// ResolveKubeConfigResponse_UserValidationError is the validation error
// returned by ResolveKubeConfigResponse_User.Validate if the designated
// constraints aren't met.
type ResolveKubeConfigResponse_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveKubeConfigResponse_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveKubeConfigResponse_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveKubeConfigResponse_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveKubeConfigResponse_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveKubeConfigResponse_UserValidationError) ErrorName() string {
	return "ResolveKubeConfigResponse_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveKubeConfigResponse_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveKubeConfigResponse_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveKubeConfigResponse_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveKubeConfigResponse_UserValidationError{}

// Validate checks the field values on ResolveKubeConfigResponse_Context with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ResolveKubeConfigResponse_Context) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResolveKubeConfigResponse_Context
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ResolveKubeConfigResponse_ContextMultiError, or nil if none found.
func (m *ResolveKubeConfigResponse_Context) ValidateAll() error {
	return m.validate(true)
}

func (m *ResolveKubeConfigResponse_Context) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Current

	if all {
		switch v := interface{}(m.GetCluster()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResolveKubeConfigResponse_ContextValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResolveKubeConfigResponse_ContextValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResolveKubeConfigResponse_ContextValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResolveKubeConfigResponse_ContextValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResolveKubeConfigResponse_ContextValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResolveKubeConfigResponse_ContextValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResolveKubeConfigResponse_ContextMultiError(errors)
	}

	return nil
}

// ResolveKubeConfigResponse_ContextMultiError is an error wrapping multiple
// validation errors returned by
// ResolveKubeConfigResponse_Context.ValidateAll() if the designated
// constraints aren't met.
type ResolveKubeConfigResponse_ContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResolveKubeConfigResponse_ContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResolveKubeConfigResponse_ContextMultiError) AllErrors() []error { return m }

// ResolveKubeConfigResponse_ContextValidationError is the validation error
// returned by ResolveKubeConfigResponse_Context.Validate if the designated
// constraints aren't met.
type ResolveKubeConfigResponse_ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveKubeConfigResponse_ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveKubeConfigResponse_ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveKubeConfigResponse_ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveKubeConfigResponse_ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveKubeConfigResponse_ContextValidationError) ErrorName() string {
	return "ResolveKubeConfigResponse_ContextValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveKubeConfigResponse_ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveKubeConfigResponse_Context.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveKubeConfigResponse_ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveKubeConfigResponse_ContextValidationError{}
