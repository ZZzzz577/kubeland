// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/cluster/cluster.proto

package cluster

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClusterServiceCreateCluster = "/api.v1.cluster.ClusterService/CreateCluster"
const OperationClusterServiceDeleteCluster = "/api.v1.cluster.ClusterService/DeleteCluster"
const OperationClusterServiceGetCluster = "/api.v1.cluster.ClusterService/GetCluster"
const OperationClusterServiceListClusters = "/api.v1.cluster.ClusterService/ListClusters"
const OperationClusterServiceResolveKubeConfig = "/api.v1.cluster.ClusterService/ResolveKubeConfig"
const OperationClusterServiceTestConnection = "/api.v1.cluster.ClusterService/TestConnection"
const OperationClusterServiceTestOperator = "/api.v1.cluster.ClusterService/TestOperator"
const OperationClusterServiceUpdateCluster = "/api.v1.cluster.ClusterService/UpdateCluster"

type ClusterServiceHTTPServer interface {
	CreateCluster(context.Context, *Cluster) (*emptypb.Empty, error)
	DeleteCluster(context.Context, *IdRequest) (*emptypb.Empty, error)
	GetCluster(context.Context, *IdRequest) (*Cluster, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	ResolveKubeConfig(context.Context, *ResolveKubeConfigRequest) (*ResolveKubeConfigResponse, error)
	TestConnection(context.Context, *Connection) (*TestConnectionResponse, error)
	TestOperator(context.Context, *Connection) (*TestOperatorResponse, error)
	UpdateCluster(context.Context, *Cluster) (*emptypb.Empty, error)
}

func RegisterClusterServiceHTTPServer(s *http.Server, srv ClusterServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/cluster", _ClusterService_ListClusters0_HTTP_Handler(srv))
	r.GET("/api/v1/cluster/{id}", _ClusterService_GetCluster0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster", _ClusterService_CreateCluster0_HTTP_Handler(srv))
	r.PUT("/api/v1/cluster/{id}", _ClusterService_UpdateCluster0_HTTP_Handler(srv))
	r.DELETE("/api/v1/cluster/{id}", _ClusterService_DeleteCluster0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster/kube/config", _ClusterService_ResolveKubeConfig0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster/connection/test", _ClusterService_TestConnection0_HTTP_Handler(srv))
	r.POST("/api/v1/cluster/operator/test", _ClusterService_TestOperator0_HTTP_Handler(srv))
}

func _ClusterService_ListClusters0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListClustersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceListClusters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListClusters(ctx, req.(*ListClustersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClustersResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_GetCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceGetCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCluster(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Cluster)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_CreateCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Cluster
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceCreateCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCluster(ctx, req.(*Cluster))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_UpdateCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Cluster
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceUpdateCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCluster(ctx, req.(*Cluster))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_DeleteCluster0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceDeleteCluster)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCluster(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_ResolveKubeConfig0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResolveKubeConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceResolveKubeConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResolveKubeConfig(ctx, req.(*ResolveKubeConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResolveKubeConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_TestConnection0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Connection
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceTestConnection)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestConnection(ctx, req.(*Connection))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TestConnectionResponse)
		return ctx.Result(200, reply)
	}
}

func _ClusterService_TestOperator0_HTTP_Handler(srv ClusterServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Connection
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClusterServiceTestOperator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestOperator(ctx, req.(*Connection))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TestOperatorResponse)
		return ctx.Result(200, reply)
	}
}

type ClusterServiceHTTPClient interface {
	CreateCluster(ctx context.Context, req *Cluster, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteCluster(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetCluster(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *Cluster, err error)
	ListClusters(ctx context.Context, req *ListClustersRequest, opts ...http.CallOption) (rsp *ListClustersResponse, err error)
	ResolveKubeConfig(ctx context.Context, req *ResolveKubeConfigRequest, opts ...http.CallOption) (rsp *ResolveKubeConfigResponse, err error)
	TestConnection(ctx context.Context, req *Connection, opts ...http.CallOption) (rsp *TestConnectionResponse, err error)
	TestOperator(ctx context.Context, req *Connection, opts ...http.CallOption) (rsp *TestOperatorResponse, err error)
	UpdateCluster(ctx context.Context, req *Cluster, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ClusterServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewClusterServiceHTTPClient(client *http.Client) ClusterServiceHTTPClient {
	return &ClusterServiceHTTPClientImpl{client}
}

func (c *ClusterServiceHTTPClientImpl) CreateCluster(ctx context.Context, in *Cluster, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/cluster"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterServiceCreateCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) DeleteCluster(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/cluster/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceDeleteCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) GetCluster(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*Cluster, error) {
	var out Cluster
	pattern := "/api/v1/cluster/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceGetCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...http.CallOption) (*ListClustersResponse, error) {
	var out ListClustersResponse
	pattern := "/api/v1/cluster"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClusterServiceListClusters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) ResolveKubeConfig(ctx context.Context, in *ResolveKubeConfigRequest, opts ...http.CallOption) (*ResolveKubeConfigResponse, error) {
	var out ResolveKubeConfigResponse
	pattern := "/api/v1/cluster/kube/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterServiceResolveKubeConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) TestConnection(ctx context.Context, in *Connection, opts ...http.CallOption) (*TestConnectionResponse, error) {
	var out TestConnectionResponse
	pattern := "/api/v1/cluster/connection/test"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterServiceTestConnection))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) TestOperator(ctx context.Context, in *Connection, opts ...http.CallOption) (*TestOperatorResponse, error) {
	var out TestOperatorResponse
	pattern := "/api/v1/cluster/operator/test"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterServiceTestOperator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClusterServiceHTTPClientImpl) UpdateCluster(ctx context.Context, in *Cluster, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/cluster/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClusterServiceUpdateCluster))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
