// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: v1/image/image.proto

package image

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationImageServiceCreateImageRepo = "/api.v1.image.ImageService/CreateImageRepo"
const OperationImageServiceDeleteImageRepo = "/api.v1.image.ImageService/DeleteImageRepo"
const OperationImageServiceGetImageRepo = "/api.v1.image.ImageService/GetImageRepo"
const OperationImageServiceListImageRepos = "/api.v1.image.ImageService/ListImageRepos"
const OperationImageServiceUpdateImageRepo = "/api.v1.image.ImageService/UpdateImageRepo"

type ImageServiceHTTPServer interface {
	CreateImageRepo(context.Context, *ImageRepo) (*emptypb.Empty, error)
	DeleteImageRepo(context.Context, *IdentityRequest) (*emptypb.Empty, error)
	GetImageRepo(context.Context, *IdentityRequest) (*ImageRepo, error)
	ListImageRepos(context.Context, *ListImageReposRequest) (*ListImageReposResponse, error)
	UpdateImageRepo(context.Context, *ImageRepo) (*emptypb.Empty, error)
}

func RegisterImageServiceHTTPServer(s *http.Server, srv ImageServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/image/repo/{name}", _ImageService_GetImageRepo0_HTTP_Handler(srv))
	r.GET("/api/v1/image/repo", _ImageService_ListImageRepos0_HTTP_Handler(srv))
	r.POST("/api/v1/image/repo", _ImageService_CreateImageRepo0_HTTP_Handler(srv))
	r.PUT("/api/v1/image/repo/{name}", _ImageService_UpdateImageRepo0_HTTP_Handler(srv))
	r.DELETE("/api/v1/image/repo/{name}", _ImageService_DeleteImageRepo0_HTTP_Handler(srv))
}

func _ImageService_GetImageRepo0_HTTP_Handler(srv ImageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageServiceGetImageRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetImageRepo(ctx, req.(*IdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageRepo)
		return ctx.Result(200, reply)
	}
}

func _ImageService_ListImageRepos0_HTTP_Handler(srv ImageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListImageReposRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageServiceListImageRepos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListImageRepos(ctx, req.(*ListImageReposRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListImageReposResponse)
		return ctx.Result(200, reply)
	}
}

func _ImageService_CreateImageRepo0_HTTP_Handler(srv ImageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImageRepo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageServiceCreateImageRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateImageRepo(ctx, req.(*ImageRepo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ImageService_UpdateImageRepo0_HTTP_Handler(srv ImageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImageRepo
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageServiceUpdateImageRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateImageRepo(ctx, req.(*ImageRepo))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ImageService_DeleteImageRepo0_HTTP_Handler(srv ImageServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationImageServiceDeleteImageRepo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteImageRepo(ctx, req.(*IdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ImageServiceHTTPClient interface {
	CreateImageRepo(ctx context.Context, req *ImageRepo, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteImageRepo(ctx context.Context, req *IdentityRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetImageRepo(ctx context.Context, req *IdentityRequest, opts ...http.CallOption) (rsp *ImageRepo, err error)
	ListImageRepos(ctx context.Context, req *ListImageReposRequest, opts ...http.CallOption) (rsp *ListImageReposResponse, err error)
	UpdateImageRepo(ctx context.Context, req *ImageRepo, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ImageServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewImageServiceHTTPClient(client *http.Client) ImageServiceHTTPClient {
	return &ImageServiceHTTPClientImpl{client}
}

func (c *ImageServiceHTTPClientImpl) CreateImageRepo(ctx context.Context, in *ImageRepo, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/image/repo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationImageServiceCreateImageRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ImageServiceHTTPClientImpl) DeleteImageRepo(ctx context.Context, in *IdentityRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/image/repo/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationImageServiceDeleteImageRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ImageServiceHTTPClientImpl) GetImageRepo(ctx context.Context, in *IdentityRequest, opts ...http.CallOption) (*ImageRepo, error) {
	var out ImageRepo
	pattern := "/api/v1/image/repo/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationImageServiceGetImageRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ImageServiceHTTPClientImpl) ListImageRepos(ctx context.Context, in *ListImageReposRequest, opts ...http.CallOption) (*ListImageReposResponse, error) {
	var out ListImageReposResponse
	pattern := "/api/v1/image/repo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationImageServiceListImageRepos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ImageServiceHTTPClientImpl) UpdateImageRepo(ctx context.Context, in *ImageRepo, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v1/image/repo/{name}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationImageServiceUpdateImageRepo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
