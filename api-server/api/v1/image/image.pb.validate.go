// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/image/image.proto

package image

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdentityRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *IdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityRequestMultiError, or nil if none found.
func (m *IdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := IdentityRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdentityRequestMultiError(errors)
	}

	return nil
}

// IdentityRequestMultiError is an error wrapping multiple validation errors
// returned by IdentityRequest.ValidateAll() if the designated constraints
// aren't met.
type IdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityRequestMultiError) AllErrors() []error { return m }

// IdentityRequestValidationError is the validation error returned by
// IdentityRequest.Validate if the designated constraints aren't met.
type IdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityRequestValidationError) ErrorName() string { return "IdentityRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityRequestValidationError{}

// Validate checks the field values on ImageRepo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageRepo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageRepo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageRepoMultiError, or nil
// if none found.
func (m *ImageRepo) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageRepo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 64 {
		err := ImageRepoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Url

	// no validation rules for Username

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageRepoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageRepoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageRepoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageRepoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageRepoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageRepoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ImageRepoMultiError(errors)
	}

	return nil
}

// ImageRepoMultiError is an error wrapping multiple validation errors returned
// by ImageRepo.ValidateAll() if the designated constraints aren't met.
type ImageRepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageRepoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageRepoMultiError) AllErrors() []error { return m }

// ImageRepoValidationError is the validation error returned by
// ImageRepo.Validate if the designated constraints aren't met.
type ImageRepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageRepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageRepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageRepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageRepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageRepoValidationError) ErrorName() string { return "ImageRepoValidationError" }

// Error satisfies the builtin error interface
func (e ImageRepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageRepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageRepoValidationError{}

// Validate checks the field values on ListImageReposRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImageReposRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImageReposRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImageReposRequestMultiError, or nil if none found.
func (m *ListImageReposRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImageReposRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListImageReposRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListImageReposRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListImageReposRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListImageReposRequestMultiError(errors)
	}

	return nil
}

// ListImageReposRequestMultiError is an error wrapping multiple validation
// errors returned by ListImageReposRequest.ValidateAll() if the designated
// constraints aren't met.
type ListImageReposRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImageReposRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImageReposRequestMultiError) AllErrors() []error { return m }

// ListImageReposRequestValidationError is the validation error returned by
// ListImageReposRequest.Validate if the designated constraints aren't met.
type ListImageReposRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImageReposRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImageReposRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImageReposRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImageReposRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImageReposRequestValidationError) ErrorName() string {
	return "ListImageReposRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListImageReposRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImageReposRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImageReposRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImageReposRequestValidationError{}

// Validate checks the field values on ListImageReposResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImageReposResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImageReposResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImageReposResponseMultiError, or nil if none found.
func (m *ListImageReposResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImageReposResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListImageReposResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListImageReposResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListImageReposResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListImageReposResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListImageReposResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListImageReposResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListImageReposResponseMultiError(errors)
	}

	return nil
}

// ListImageReposResponseMultiError is an error wrapping multiple validation
// errors returned by ListImageReposResponse.ValidateAll() if the designated
// constraints aren't met.
type ListImageReposResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImageReposResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImageReposResponseMultiError) AllErrors() []error { return m }

// ListImageReposResponseValidationError is the validation error returned by
// ListImageReposResponse.Validate if the designated constraints aren't met.
type ListImageReposResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImageReposResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImageReposResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImageReposResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImageReposResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImageReposResponseValidationError) ErrorName() string {
	return "ListImageReposResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListImageReposResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImageReposResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImageReposResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImageReposResponseValidationError{}
